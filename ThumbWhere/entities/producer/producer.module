<?php

/**
 * @file
 * Module for the Producer Entity - a starting point to create your own Entity
 * and associated administration interface
 */  


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function producer_entity_info() {
  $return['producer'] = array(
    'label' => t('Producer'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Producer',
    'controller class' => 'ProducerController',
    'base table' => 'producer',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'producer_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the producer types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'producer_create',
    'access callback' => 'producer_access',
    'module' => 'producer',
    // The information below is used by the ProducerUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/producers',
      'file' => 'producer.admin.inc',
      'controller class' => 'ProducerUIController',
      'menu wildcard' => '%producer',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['producer_type'] = array(
    'label' => t('Producer Type'),
    'entity class' => 'ProducerType',
    'controller class' => 'ProducerTypeController',
    'base table' => 'producer_type',
    'fieldable' => FALSE,
    'bundle of' => 'producer',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'producer_type_access',
    'module' => 'producer',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/producer_types',
      'file' => 'producer_type.admin.inc',
      'controller class' => 'ProducerTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the producer types via a hook to avoid a recursion
 * issue as loading the producer types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function producer_entity_info_alter(&$entity_info) {
  foreach (producer_get_types() as $type => $info) {
    $entity_info['producer']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/producer_types/manage/%producer_type',
        'real path' => 'admin/structure/producer_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer producer types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function producer_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer producer types' => array(
      'title' => t('Administer producer types'),
      'description' => t('Create and delete fields for producer types, and set their permissions.'),
    ),
    'administer producers' => array(
      'title' => t('Administer producers'),
      'description' => t('Edit and delete all producers'),
    ),  
  );
  
  //Generate permissions per producer 
  foreach (producer_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name producer" => array(
        'title' => t('%type_name: Edit any producer', array('%type_name' => $type->label)),
      ),
      "view any $type_name producer" => array(
        'title' => t('%type_name: View any producer', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a producer.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $producer
 *   Optionally a producer or a producer type to check access for. If nothing is
 *   given, access for all producers is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function producer_access($op, $producer = NULL, $account = NULL) {
  if (user_access('administer producers', $account)) {
    return TRUE;
  }
  if (isset($producer) && $type_name = $producer->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name producer", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function producer_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer producer types', $account);
}


/**
 * Gets an array of all producer types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ProducerType[]
 *   Depending whether $type isset, an array of producer types or a single one.
 */
function producer_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our producer entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('producer_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a producer type by string.
 *
 * @param $type
 *   The machine-readable name of a producer type to load.
 * @return
 *   A producer type array or FALSE if $type does not exist.
 */
function producer_type_load($type) {
  return producer_get_types($type);
}


/**
 * Fetch a producer object. Make sure that the wildcard you choose 
 * in the producer entity definition fits the function name here.
 *
 * @param $producer_id
 *   Integer specifying the producer id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $producer object or FALSE if it cannot be loaded.
 *
 * @see producer_load_multiple()
 */
function producer_load($producer_id, $reset = FALSE) {
  $producers = producer_load_multiple(array($producer_id), array(), $reset);
  return reset($producers);
}


/**
 * Load multiple producers based on certain conditions.
 *
 * @param $producer_ids
 *   An array of producer IDs.
 * @param $conditions
 *   An array of conditions to match against the {producer} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of producer objects, indexed by producer_id.
 *
 * @see entity_load()
 * @see producer_load()
 */
function producer_load_multiple($producer_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('producer', $producer_ids, $conditions, $reset);
}


/**
 * Deletes a producer.
 */
function producer_delete(Producer $producer) {
  $producer->delete();
}


/**
 * Delete multiple producers.
 *
 * @param $producer_ids
 *   An array of producer IDs.
 */
function producer_delete_multiple(array $producer_ids) {
  entity_get_controller('producer')->delete($producer_ids);
}


/**
 * Create a producer object.
 */
function producer_create($values = array()) {
  return entity_get_controller('producer')->create($values);
}


/**
 * Saves a producer to the database.
 *
 * @param $producer
 *   The producer object.
 */
function producer_save(Producer $producer) {
  return $producer->save();
}


/**
 * Saves a producer type to the db.
 */
function producer_type_save(ProducerType $type) {
  $type->save();
}


/**
 * Deletes a producer type from the db.
 */
function producer_type_delete(ProducerType $type) {
  $type->delete();
}


/**
 * URI callback for producers
 */
function producer_uri(Producer $producer){
  return array(
    'path' => 'producer/' . $producer->producer_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function producer_page_title(Producer $producer){
  return $producer->name;
}


/**
 * Sets up content to show an individual producer
 * @todo - get rid of drupal_set_title();
 */
function producer_page_view($producer, $view_mode = 'full') {    
  $controller = entity_get_controller('producer');  
  $content = $controller->view(array($producer->producer_id => $producer));
  drupal_set_title($producer->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function producer_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'producer') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function producer_theme() {
  return array(
    'producer_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'producer.admin.inc',
    ),
    'producer' => array(
      'render element' => 'elements',
      'template' => 'producer',
    ),
   'producer_sample_data' => array(
      'variables' => array('producer_sample_data', 'producer' => NULL),
      'template' => 'producer-sample-data',
    ),


  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function producer_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/producers/add' on 'admin/structure/producers'.
  if ($root_path == 'admin/content/producers') {
    $item = menu_get_item('admin/content/producers/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for producer entities
 */
class Producer extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'producer');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'producer/' . $this->producer_id);
  }
  
  
}


/**
 * The class used for producer type entities
 */
class ProducerType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'producer_type');
  }
  
}


/**
 * The Controller for Producer entities
 */
class ProducerController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a producer - we first set up the values that are specific
   * to our producer schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the producer.
   *
   * @return
   *   A producer object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Producer
    $values += array( 
      'producer_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $producer = parent::create($values);
    return $producer;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['producer_sample_data'] =  array(
      '#markup' => theme('producer_sample_data', array('producer_sample_data' => check_plain($entity->data['sample_data']), 'producer' => $entity)),
    );

    return $content;
  }
  
}


/**
 * The Controller for Producer entities
 */
class ProducerTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a producer type - we first set up the values that are specific
   * to our producer type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the producer.
   *
   * @return
   *   A producer type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Producer
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $producer_type = parent::create($values);
    return $producer_type;
  }

}