<?php

/**
 * @file
 * Module for the Producer Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

//dd('producer.module');

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function producer_entity_info() {
  $return['producer'] = array(
    'label' => t('Producer'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Producer',
    'controller class' => 'ProducerController',
    'base table' => 'producer',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'producer_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the producer types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    //'creation callback' => 'producer_create',
    //'access callback' => 'producer_access',
    //'presave callback' => 'producer_presave',
    'module' => 'producer',
    // The information below is used by the ProducerUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/producers',
      'file' => 'producer.admin.inc',
      'controller class' => 'ProducerUIController',
      'menu wildcard' => '%producer',
    ),
  );
  
  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the producer types via a hook to avoid a recursion
 * issue as loading the producer types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
/*
function producer_entity_info_alter(&$entity_info) {
  
  
  //dd('producer_entity_info_alter ');
  
  foreach (producer_get_types() as $type => $info) {
    $entity_info['producer']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/producer_types/manage/%producer_type',
        'real path' => 'admin/structure/producer_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer producer types'),
      ),
    );
  }  
}
*/



/**
 * Implements hook_permission().
 */
function producer_permission() {
  
  //dd('producer_permission');
  
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer producers' => array(
      'title' => t('Administer producers'),
      'description' => t('Edit and delete all producers'),
    ),  
  );
  
  /*
  //Generate permissions per producer 
  foreach (producer_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name producer" => array(
        'title' => t('%type_name: Edit any producer', array('%type_name' => $type->label)),
      ),
      "view any $type_name producer" => array(
        'title' => t('%type_name: View any producer', array('%type_name' => $type->label)),
      ),
    );
  }*/
  return $permissions;  
}


/**
 * Determines whether the given user has access to a producer.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $producer
 *   Optionally a producer or a producer type to check access for. If nothing is
 *   given, access for all producers is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function producer_access($op, $producer = NULL, $account = NULL) {
  
  //dd('producer_access');
  
  if (user_access('administer producers', $account)) {
    return TRUE;
  }
  
  /*
  if (isset($producer) && $type_name = $producer->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name producer", $account)) {
      return TRUE;
    }
  }*/
  return FALSE;
}




/**
 * Fetch a producer object. Make sure that the wildcard you choose 
 * in the producer entity definition fits the function name here.
 *
 * @param $producer_id
 *   Integer specifying the producer id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $producer object or FALSE if it cannot be loaded.
 *
 * @see producer_load_multiple()
 */
function producer_load($producer_id, $reset = FALSE) {

  dd('HOOK producer_load');
  dargs(TRUE);
  
  //$producers = producer_load_multiple(array($producer_id), array(), $reset);
  
  $producers = entity_load('producer', array($producer_id), array(), $reset);
  
  return reset($producers);
}


/**
* Implements hook_entity_presave
*
* @param $entity
*   Integer specifying the producer id.
  * @param $type
  *   A boolean indicating that the internal cache should be reset.
* @return
*   A fully-loaded $producer object or FALSE if it cannot be loaded.
*
* @see producer_load_multiple()
*/
function producer_presave($entity, $type) {

  dd('HOOK producer_entity_presave');
  
  dargs(TRUE);
}



/**
 * Load multiple producers based on certain conditions.
 *
 * @param $producer_ids
 *   An array of producer IDs.
 * @param $conditions
 *   An array of conditions to match against the {producer} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of producer objects, indexed by producer_id.
 *
 * @see entity_load()
 * @see producer_load()
 */
function producer_load_multiple($producer_ids = array(), $conditions = array(), $reset = FALSE) {
  
  dd('HOOK producer_load_multiple');  
  dargs(TRUE);
  
  $loaded = entity_load('producer', $producer_ids, $conditions, $reset);
  
  dd($loaded);
  
  return $loaded;
}


/**
 * Deletes a producer.
 */
function producer_delete(Producer $producer) {
  
  dd('HOOK producer_delete');
  dd($producer);
  
  $producer->delete();
}


/**
 * Delete multiple producers.
 *
 * @param $producer_ids
 *   An array of producer IDs.
 */
function producer_delete_multiple(array $producer_ids) {
  
  dd('HOOK producer_delete_multiple');
  
  entity_get_controller('producer')->delete($producer_ids);
}



/**
 * Create a producer object.
 */

function producer_create($values = array()) {
  
  dd('HOOK producer_create');  
  dargs(TRUE);
  
  return entity_get_controller('producer')->create($values);
}


/**
 * Saves a producer to the database.
 *
 * @param $producer
 *   The producer object.
 */

function producer_save(Producer $producer) {
  
  dd('HOOK producer_save');
  dargs(TRUE);
  
  return $producer->save();
}



/**
* Create a producer
*
* @param $producer
*   The producer object.
*/
function producer_insert(array $values = array()) {

  dd('HOOK producer_insert');
  dargs(TRUE);

  return $producer->create($values);
}



/**
 * URI callback for producers
 */
function producer_uri(Producer $producer){
  
  dd('HOOK producer_uri');
  
  return array(
    'path' => 'producer/' . $producer->producer_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function producer_page_title(Producer $producer){
  
  dd('HOOK producer_page_title');
  
  return $producer->name;
}


/**
 * Sets up content to show an individual producer
 * @todo - get rid of drupal_set_title();
 */
function producer_page_view($producer, $view_mode = 'full') {   

  dd('HOOK producer_page_view');
  
  $controller = entity_get_controller('producer');  
  $content = $controller->view(array($producer->producer_id => $producer));
  drupal_set_title($producer->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function producer_views_api() {
  
  dd('HOOK producer_views_api');
  
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'producer') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function producer_theme() {
  
  dd('HOOK producer_theme');
  
  return array(
    'producer_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'producer.admin.inc',
    ),
    'producer' => array(
      'render element' => 'elements',
      'template' => 'producer',
    ),
   'producer_sample_data' => array(
      'variables' => array('producer_sample_data', 'producer' => NULL),
      'template' => 'producer-sample-data',
    ),

  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function producer_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  
  //dd('producer_menu_local_tasks_alter');
  
  // Add action link 'admin/structure/producers/add' on 'admin/structure/producers'.
  if ($root_path == 'admin/content/producers') {
    $item = menu_get_item('admin/content/producers/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for producer entities
 */
class Producer extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'producer');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'producer/' . $this->producer_id);
  }
  
  
}



/**
 * The Controller for Producer entities
 */
class ProducerController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a producer - we first set up the values that are specific
   * to our producer schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the producer.
   *
   * @return
   *   A producer object with all default fields initialized.
   */
  public function create(array $values = array()) {
    
    dd('ProducerController:create');       
    dargs(TRUE);
    
    // Add values that are specific to our Producer
    $values += array( 
      'producer_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $producer = parent::create($values);
    
    dd($producer);
    
    return $producer;
  }
  
  
  /**
  * view
  * to our producer schema but then also go through the EntityAPIController
  * function.
  *
  * @param $type
  *   The machine-readable type of the producer.
  *
  * @return
  *   A producer object with all default fields initialized.
  */
    public function view($entities, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  
    dd('ProducerController:view');
    dargs(TRUE);
      
      
      
    $view = parent::view($entities,$view_mode,$langcode,$page);
  
    dd($producer);
  
    return $producer;
  }
  
  
  
  
  /**
  * query - Builds and executes the query for loading.
  *
  * @param $ids
  *   Array of ids
  *
  * @param $conditions
  *
  *
  *
  * @return
  *   A producer object with all default fields initialized.
  */
  public function load($ids = array(), $conditions = array()) {
  
    dd('ProducerController:load');
  
    dd($ids);
    dd($conditions);
  
    dargs(TRUE);
  
    return parent::load($ids, $conditions);
  }
    

  /**
  * Invoke
  *
  * @param $ids
  *   Array of ids
  *
  * @param $transaction
  *   If not null then the transaction this is taking part in
  *
  * @return
  *   A producer object with all default fields initialized.
  */
  public function invoke($hook, $entity) {
  
    dd('ProducerController:invoke');
    dargs(TRUE);
  
    parent::invoke($hook, $entity);
  
  }
  
  
  /**
  * Delete a producer.
  *
  * @param $ids
  *   Array of ids
  *   
  * @param $transaction
  *   If not null then the transaction this is taking part in
  *
  * @return
  *   A producer object with all default fields initialized.
  */
  public function delete($ids, DatabaseTransaction $transaction = NULL) {
  
    dd('ProducerController:delete');
    dargs(TRUE);
    
    parent::delete($ids,$transaction);
    
  }  

  
  /**
  * Save a producer.
  *
  * @param $producer
  *   The producer being saved
  *
  * @param $transaction
  *   If not null then the transaction this is taking part in
  *
  * @return
  *   A producer object with all default fields initialized.
  */
  public function save($producer, DatabaseTransaction $transaction = NULL) {
  
    dd('ProducerController:save');
    dargs(TRUE);
  
    return parent::save($producer,$transaction);
  
  }
  
  
  /**
  * resetCache - Called when the cache is
  *
  * @param $ids
  *   Array of ids
  *
  * @return
  *   void
  */
  public function resetCache(array $ids = NULL) {
  
    dd('ProducerController:resetCache');
    dargs(TRUE);
  
     parent::resetCache($ids);
  }
  

  /**
  * query - Builds and executes the query for loading.
  *
  * @param $ids
  *   Array of ids
  *
  * @param $conditions
  *
  * @param $revision_id
  *
  *
  * @return
  *   A producer object with all default fields initialized.
  */
  public function query($ids, $conditions, $revision_id = FALSE) {
  
    dd('ProducerController:query');
    dargs(TRUE);
    
    dd($ids);
    dd($conditions);
  
    $result= parent::query($ids, $conditions, $revision_id);
    
    return $result;
  }
  
  
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['producer_sample_data'] =  array(
      '#markup' => theme('producer_sample_data', array('producer_sample_data' => check_plain($entity->data['sample_data']), 'producer' => $entity)),
    );

    return $content;
  }
  
}
