<?php

// Include the ThumbWhere SDK
require_once(dirname(__FILE__) . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'dependencies' . DIRECTORY_SEPARATOR . 'tw' . DIRECTORY_SEPARATOR . 'sdk.class.php');

/**
 * @file
 * Default implementation of the field storage API.
 */

/**
 * Implements hook_help().
 */
function producer_field_storage_help($path, $arg) {
  switch ($path) {
    case 'admin/help#producer_field_storage':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ThumbWhere Producer Entity storage module stores field data in a remote instance of ThumbWhere. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_storage_info().
 */
function producer_field_storage_field_storage_info() {
  return array(
    'producer_field_storage' => array(
      'label' => t('ThumbWhere Producer Field Storage'),
      'description' => t('Stores fields for Producer Entities using a remote ThumbWhere Server as a Repository.'),
    ),
  );
}

/**
 * Implements hook_field_storage_create_field().
 */
function producer_field_storage_field_storage_create_field($field) {

  twfd();


  // This is all ok... this is what is done when something adds a ThumbWhere field to itself.
  //throw new Exception('You attempted to create a field that is defined in ThumbWhere.');
}


/**
 * Implements hook_field_storage_update_field().
 */
function producer_field_storage_field_storage_update_field($field, $prior_field, $has_data) {

  twfd();

  throw new Exception('You attempted to update a field that is defined in ThumbWhere.');
}

/**
 * Implements hook_field_storage_delete_field().
 */
function producer_field_storage_field_storage_delete_field($field) {

  twfd();

  // This is OK... but I don't know why...
  //throw new Exception('You attempted to delete a field that is defined in ThumbWhere.');
}

/**
 * Implements hook_field_storage_load().
 */
function producer_field_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {

  twfd();

    foreach ($entities as $entity) {

      // Flee if this entity type is not one we look after...
      if (($entity_type == 'producer') || (($entity_type == 'node') && ($entity->type == 'track'))) {

        $twid = NULL;

        // We need to treat nodes differently to entities
        if ($entity_type == 'node') {

          if (!isset($entity->thumbwhere_id['und'][0]['value'])) {
              throw new Exception('Entity using ThumbWhere field storage has no thumbwhere_id');
              return;
          }

          $twid = $entity->thumbwhere_id['und'][0]['value'];

          $entity->track_quantity['und'][0]['value'] = 'updated-at-loadxxx-' . rand(100, 200) . 'tw-' . $twid;

        }
        else {

          if ($entity->thumbwhere_id == NULL)  {
            throw new Exception('Entity using ThumbWhere field storage has no thumbwhere_id');
          }

          $twid = $entity->thumbwhere_id;


          twd('ThumbWhere \'Producer\' ENTITY ' . $entity->thumbwhere_id);
          twd($entity);


          // Saving existing... let's just modify the producer quantity
          $entity->producer_colorrgba['und'][0]['value'] = 'updated-at-load-' . rand(100, 200) . 'tw-' . $entity->thumbwhere_id ;
          $entity->producer_colorrgba['und'][1]['value'] = 'updated-at-load-' . rand(100, 200) . 'tw-' . $entity->thumbwhere_id;
          $entity->producer_colorrgba['und'][2]['value'] = 'updated-at-load-' . rand(100, 200) . 'tw-' . $entity->thumbwhere_id;
          $entity->producer_quantity['und'][0]['value']  = 'updated-at-load -' . rand(100, 200) . 'tw-' . $entity->thumbwhere_id;

        }

        twd($entity);


      }
    }


}

/**
* Implements hook_field_storage_pre_insert().
*/
function producer_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {

  twfd();

  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;


}

/**
 * Implements hook_field_storage_write().
 */
function producer_field_storage_field_storage_write($entity_type, $entity, $op, $fields) {

  twfd();

  // Flee if this entity type is not one we look after...
  if (($entity_type == 'producer') || (($entity_type == 'node') && ($entity->type == 'track'))) {


    // We only want to write if this is new - otherwise we do this
    if (!$entity->is_new) {
      twd('Updating Remote Object');

      // We need to treat nodes differently to entities
      if ($entity_type == 'node') {

         // We write the change to thumbwhere here

      }
      else {
        //   Saving existing... let's just modify the producer quantity
        $entity->producer_quantity['und'][0]['value'] = 'updated-at-save-' . rand(100, 200);
      }
    }
  }
}

/**
 * Implements hook_field_storage_delete().
 *
 * This function deletes data for all fields for an entity from the database.
 */
function producer_field_storage_field_storage_delete($entity_type, $entity, $fields) {

  // We only look after what we want...
  if (($entity_type == 'producer') || (($entity_type == 'node') && ($entity->type == 'track'))) {
    twfd();
  }

}

/**
 * Implements hook_field_storage_purge().
 *
 * This function deletes data from the database for a single field on
 * an entity.
 */
function producer_field_storage_field_storage_purge($entity_type, $entity, $field, $instance) {

  // We only look after what we want...
  if (($entity_type == 'producer') || (($entity_type == 'node') && ($entity->type == 'track'))) {
    twfd();
  }

}

/**
 * Implements hook_field_storage_query().
 *
 * This hook is called to find the entities having certain entity and field conditions and
 * sort them in the given field order.
 *
 * If the field storage engine also handles property sorts and orders, it should unset those
 * properties in the called object to signal that those have been handled.
 */
function producer_field_storage_field_storage_query(EntityFieldQuery $query) {

  twfd();

  return array();

}


/**
 * Implements hook_field_storage_delete_revision().
 *
 * This function actually deletes the data from the database.
 */
function producer_field_storage_field_storage_delete_revision($entity_type, $entity, $fields) {

  twfd();

  throw new Exception('You attempted to delete a past revision of a field. Not supported.');
}

/**
 * Implements hook_field_storage_delete_instance().
 *
 * This function simply marks for deletion all data associated with the field.
 */
function producer_field_storage_field_storage_delete_instance($instance) {

  twfd();

  // This is OK as this is just an instance being used by another Entity/Content Type
  //throw new Exception('You attempted to delete an instance of a field that is defined in ThumbWhere.');

}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function producer_field_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {

  twfd();

  throw new Exception('You attempted to rename the bundle of a field that is defined in ThumbWhere.');

}

/**
 * Implements hook_field_storage_purge_field().
 *
 * All field data items and instances have already been purged, so all
 * that is left is to delete the table.
 */
function producer_field_storage_field_storage_purge_field($field) {

  twfd();

  //throw new Exception('You attempted to purge field storage for a field that is ThumbWhere. (This might happen if you deleted the last Entity. We may need to make this ne quiet)');
}

/**
 * Implements producer_field_storage_entity_presave().
 *
 * Act on an entity before it is about to be created or updated.
 *
 * @param $entity
 *   The entity object
 * @param $type
 *   The type of entity being saved (i.e. node, user, comment).
 */
function producer_field_storage_entity_presave($entity, $entity_type) {

  // We only look after what we want...
  if (($entity_type == 'producer') || (($entity_type == 'node') && ($entity->type == 'track'))) {

    twfd();

     // If this is new
    if ($entity->is_new) {

      twd('Creating Remote Object and linking to ThumbWhere entity..');

      // We need to treat nodes differently to entities
      if ($entity_type == 'node') {

          // For presave we just want to ensure that the field is ready to be populated...
          if (!isset($entity->thumbwhere_id['und'])) {
              throw new Exception('Entity using ThumbWhere field storage has no thumbwhere_id');
          }

          $entity->thumbwhere_id['und'][0]['value'] =  $_SESSION['thumbwhere_producer']['id']++;

      }
      else {
        if (!isset($entity->thumbwhere_id))  {
            throw new Exception('Entity using ThumbWhere field storage has no thumbwhere_id');
        }
        // Create the new producer entity
        $entity->thumbwhere_id = $_SESSION['thumbwhere_producer']['id']++;
      }
    }
  }

}