<?php

// Include the ThumbWhere SDK
require_once(dirname(__FILE__) . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'dependencies' . DIRECTORY_SEPARATOR . 'tw' . DIRECTORY_SEPARATOR . 'sdk.class.php');

/**
 * @file
 * Default implementation of the field storage API.
 */

/**
 * Implements hook_help().
 */
function producer_field_storage_help($path, $arg) {
  switch ($path) {
    case 'admin/help#producer_field_storage':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ThumbWhere Producer Entity storage module stores field data in a remote instance of ThumbWhere. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_storage_info().
 */
function producer_field_storage_field_storage_info() {
  return array(
    'producer_field_storage' => array(
      'label' => t('ThumbWhere Producer Field Storage'),
      'description' => t('Stores fields for Producer Entities using a remote ThumbWhere Server as a Repository.'),
    ),
  );
}

/**
 * Implements hook_field_storage_create_field().
 */
function producer_field_storage_field_storage_create_field($field) {

  twfd();

  throw new Exception('You attempted to create a field that is defined in ThumbWhere.');
}


/**
 * Implements hook_field_storage_update_field().
 */
function producer_field_storage_field_storage_update_field($field, $prior_field, $has_data) {

  twfd();

  throw new Exception('You attempted to update a field that is defined in ThumbWhere.');
}

/**
 * Implements hook_field_storage_delete_field().
 */
function producer_field_storage_field_storage_delete_field($field) {

  twfd();

  throw new Exception('You attempted to delete a field that is defined in ThumbWhere.');
}

/**
 * Implements hook_field_storage_load().
 */
function producer_field_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {

  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;

  twfd();


  foreach ($entities as $entity)
  {

    twd('ThumbWhere \'Producer\' ENTITY ' . $entity->thumbwhere_id);
    twd($entity);

    // Saving existing... let's just modify the producer quantity
    $entity->producer_colorrgba['und'][0]['value'] = 'updated-at-load-' . rand(100,200) . 'tw-' . $entity->thumbwhere_id ;
    $entity->producer_colorrgba['und'][1]['value'] = 'updated-at-load-' . rand(100,200) . 'tw-' . $entity->thumbwhere_id;
    $entity->producer_colorrgba['und'][2]['value'] = 'updated-at-load-' . rand(100,200) . 'tw-' . $entity->thumbwhere_id;
    $entity->producer_quantity['und'][0]['value']  = 'updated-at-load -' . rand(100,200) . 'tw-' . $entity->thumbwhere_id;

    twd($entity);
  }

}

/**
* Implements hook_field_storage_pre_insert().
*/
function producer_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {

  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;

  twfd();

}

/**
 * Implements hook_field_storage_write().
 */
function producer_field_storage_field_storage_write($entity_type, $entity, $op, $fields) {

  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;

  twfd();

  // We only want to write if this is new (
  if (!$entity->is_new)
  {
    twd('Updating Remote Object');

    // Saving existing... let's just modify the producer quantity
    $entity->producer_quantity['und'][0]['value'] = 'updated-at-save-' . rand(100,200);
  }

}

/**
 * Implements hook_field_storage_delete().
 *
 * This function deletes data for all fields for an entity from the database.
 */
function producer_field_storage_field_storage_delete($entity_type, $entity, $fields) {

  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;

  twfd();

}

/**
 * Implements hook_field_storage_purge().
 *
 * This function deletes data from the database for a single field on
 * an entity.
 */
function producer_field_storage_field_storage_purge($entity_type, $entity, $field, $instance) {


  // Flee if this entity type is not one we look after...
  if ($entity_type != 'producer') return;

  twfd();

}

/**
 * Implements hook_field_storage_query().
 */
function producer_field_storage_field_storage_query(EntityFieldQuery $query) {

  twfd();

  throw new Exception('You attempted to execute a query against this field. Not currently supported.');

  return null;

  /*

  if ($query->age == FIELD_LOAD_CURRENT) {
    $tablename_function = '_producer_field_storage_tablename';
    $id_key = 'entity_id';
  }
  else {
    $tablename_function = '_producer_field_storage_revision_tablename';
    $id_key = 'revision_id';
  }
  $table_aliases = array();
  // Add tables for the fields used.
  foreach ($query->fields as $key => $field) {
    $tablename = $tablename_function($field);
    // Every field needs a new table.
    $table_alias = $tablename . $key;
    $table_aliases[$key] = $table_alias;
    if ($key) {
      $select_query->join($tablename, $table_alias, "$table_alias.entity_type = $field_base_table.entity_type AND $table_alias.$id_key = $field_base_table.$id_key");
    }
    else {
      $select_query = db_select($tablename, $table_alias);
      $select_query->addTag('entity_field_access');
      $select_query->addMetaData('base_table', $tablename);
      $select_query->fields($table_alias, array('entity_type', 'entity_id', 'revision_id', 'bundle'));
      $field_base_table = $table_alias;
    }
    if ($field['cardinality'] != 1 || $field['translatable']) {
      $select_query->distinct();
    }
  }

  // Add field conditions. We need a fresh grouping cache.
  drupal_static_reset('_producer_field_storage_query_field_conditions');
  _producer_field_storage_query_field_conditions($query, $select_query, $query->fieldConditions, $table_aliases, '_producer_field_storage_columnname');

  // Add field meta conditions.
  _producer_field_storage_query_field_conditions($query, $select_query, $query->fieldMetaConditions, $table_aliases, '_producer_field_storage_query_columnname');

  if (isset($query->deleted)) {
    $select_query->condition("$field_base_table.deleted", (int) $query->deleted);
  }

  // Is there a need to sort the query by property?
  $has_property_order = FALSE;
  foreach ($query->order as $order) {
    if ($order['type'] == 'property') {
      $has_property_order = TRUE;
    }
  }

  if ($query->propertyConditions || $has_property_order) {
    if (empty($query->entityConditions['entity_type']['value'])) {
      throw new EntityFieldQueryException('Property conditions and orders must have an entity type defined.');
    }
    $entity_type = $query->entityConditions['entity_type']['value'];
    $entity_base_table = _producer_field_storage_query_join_entity($select_query, $entity_type, $field_base_table);
    $query->entityConditions['entity_type']['operator'] = '=';
    foreach ($query->propertyConditions as $property_condition) {
      $query->addCondition($select_query, "$entity_base_table." . $property_condition['column'], $property_condition);
    }
  }
  foreach ($query->entityConditions as $key => $condition) {
    $query->addCondition($select_query, "$field_base_table.$key", $condition);
  }

  // Order the query.
  foreach ($query->order as $order) {
    if ($order['type'] == 'entity') {
      $key = $order['specifier'];
      $select_query->orderBy("$field_base_table.$key", $order['direction']);
    }
    elseif ($order['type'] == 'field') {
      $specifier = $order['specifier'];
      $field = $specifier['field'];
      $table_alias = $table_aliases[$specifier['index']];
      $sql_field = "$table_alias." . _producer_field_storage_columnname($field['field_name'], $specifier['column']);
      $select_query->orderBy($sql_field, $order['direction']);
    }
    elseif ($order['type'] == 'property') {
      $select_query->orderBy("$entity_base_table." . $order['specifier'], $order['direction']);
    }
  }

  return $query->finishQuery($select_query, $id_key);
  */

}


/**
 * Implements hook_field_storage_delete_revision().
 *
 * This function actually deletes the data from the database.
 */
function producer_field_storage_field_storage_delete_revision($entity_type, $entity, $fields) {

  twfd();

  throw new Exception('You attempted to delete a past revision of a field. Not supported.');
}

/**
 * Implements hook_field_storage_delete_instance().
 *
 * This function simply marks for deletion all data associated with the field.
 */
function producer_field_storage_field_storage_delete_instance($instance) {

  twfd();

  throw new Exception('You attempted to delete an instance of a field that is defined in ThumbWhere.');

}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function producer_field_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {

  twfd();

  throw new Exception('You attempted to rename the bundle of a field that is defined in ThumbWhere.');

}

/**
 * Implements hook_field_storage_purge_field().
 *
 * All field data items and instances have already been purged, so all
 * that is left is to delete the table.
 */
function producer_field_storage_field_storage_purge_field($field) {

  twfd();

  throw new Exception('You attempted to purge field storage for a field that is ThumbWhere. (This might happen if you deleted the last Entity. We may need to make this ne quiet)');
}

/**
 * Implements producer_field_storage_entity_presave().
 *
 * Act on an entity before it is about to be created or updated.
 *
 * @param $entity
 *   The entity object
 * @param $type
 *   The type of entity being saved (i.e. node, user, comment).
 */
function producer_field_storage_entity_presave($entity, $type) {

  // Flee if this is not the entity type we are looking for
  if ($type != 'producer') return;

  twfd();

   // If this is new
  if ($entity->is_new)
  {
    twd('Creating Remote Object and linking to ThumbWhere entity..');

    // Create the new producer entity
    $entity->thumbwhere_id = $_SESSION['thumbwhere_producer']['id']++;
  }

}