<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
 * Implements hook_uninstall().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup producer
 */
function producer_uninstall() {

  ddl('_producer_uninstall()');

  //
  // Uninstall all the field info
  //

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_producer_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the producer
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('producer', 'producer');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

  // Purge all field infromation
  // Clear the entity cache
  entity_info_cache_clear();

  // Clear the everything cache
  drupal_flush_all_caches();

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($producer_menu = menu_load('producer')) {
      ddl('deleting producer menu');
      menu_delete($producer_menu);
    }
  }

  // Rebuild the menu
  menu_rebuild();
}

/**
 * Implements hook_install().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup producer
 */
function producer_install() {

  ddl('producer_install()');

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_producer_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_producer_installed_instances() as $instance) {
    $instance['entity_type'] = 'producer';
    $instance['bundle'] ='producer';
    field_create_instance($instance);
  }

}


/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup producer
 */
function producer_enable() {
  ddl('producer_enable()');

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup producer
 */
function producer_disable() {
  ddl('producer_disable()');

  // Rebuild the menu
  menu_rebuild();
}


/**
 * Implements hook_schema().
 *
 *
 * This is where we define the schema for our entity.
 *
 * This results in a table being created called 'producer'
 *
 * producer_id
 * The primary key used by
 *
 * thumbwhere_id
 * Used to map to the actual object in ThumbWhere.

 */
function producer_schema() {
  $t = get_t();

  $schema = array();

  $schema['producer'] = array(
    'description' => 'The base table for producer entities.',
    'fields' => array(
      'producer_id' => array(
        'description' => 'Primary Key: Identifier for a producer.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'thumbwhere_id' => array(
        'description' => 'ThumbWhere Id: ThumbWhere\'s id for this entity. Represents the id of this entity in the ThumbWhere \'Producers\' entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => -1,
      ),
      'name' => array(
          'description' => 'The name of the producer - a human-readable identifier.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
      ),
    ),
    'primary key' => array('producer_id'),
    'indexes' => array(
      'thumbwhere_id' => array('thumbwhere_id'),
    ),
  );

  return $schema;
}



/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * producer_install() and producer_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup producer
 */
function _producer_installed_fields() {
  $t = get_t();
  return array(
    'producer_colorrgba' => array(
      'field_name' => 'producer_colorrgba',
      'cardinality' => 3,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
      'storage'    => array(
          'type' => 'producer_field_storage',
          'settings' => array(),
      ),
    ),
    'producer_quantity' => array(
      'field_name'  => 'producer_quantity',
      'cardinality' => 1,
      'type'        => 'text',
      'storage'    => array(
        'type' => 'producer_field_storage',
        'settings' => array(),
      ),
    ),
    'producer_image' => array(
      'field_name' => 'producer_image',
      'type'       => 'image',
      'cardinality' => 1,
      'storage'    => array(
          'type' => 'producer_field_storage',
          'settings' => array(),
      ),
    ),
    'producer_related' => array(
      'field_name' => 'producer_related',
    	'type' => 'entityreference',
    	'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    	'settings' => array(
      	'target_type' => 'producer',
      	'handler_settings' => array('target_bundles' => array('producer')),
      ),
      'storage'    => array(
				'type' => 'producer_field_storage',
				'settings' => array(),
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "producer_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * producer_install() and producer_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup producer
 */
function _producer_installed_instances() {

  $t = get_t();

  return array(
    'producer_colorrgba' => array(
      'field_name' => 'producer_colorrgba',
      'no_ui'       => TRUE,
      'label'       => $t('The colors available for this object.'),
      'widget'      => array(
          'type'    => 'text_textfield',
      ),
      /*
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'producer_colors',
          ),
      ),
      */
    ),

    'producer_quantity' => array(
      'field_name'  => 'producer_quantity',
      'no_ui'       => TRUE,
      'label' => $t('Quantity required'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      /*
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
      */
    ),

    'producer_image' => array(
      'field_name'  => 'producer_image',
      'no_ui'       => TRUE,
      'label'       => $t('Upload an image:'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
      /*
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ),
      ),*/
    ),

   'producer_related' => array(
      'field_name' => 'producer_related',
  	  'no_ui'       => TRUE,
      'entity_type' => 'producer',
  		'required'    => FALSE,
      'label' => 'Your Label',
      'widget' => array(
        'type' => 'options_select',
      ),
  		/*
  		'display' => array(
          'example_node_list' => array(
            'label' => 'hidden',
            'type' => 'hidden',
          ),
      	),*/
    ),
  );
}