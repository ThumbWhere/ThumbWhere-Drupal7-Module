<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
* Implements hook_uninstall().
*
* This hook is called when the user not only has disabled the module,
* but also uninstalls it from the 'uninstall' tab in the module page.
*
* So it's a perfect time to remove our fields and instances and new
* node type from the database.
*
* @ingroup twcontent
*/
function producer_uninstall() {

  ddl('_producer_uninstall()');
  
  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
  
  
  // Clear the entity cache    
  entity_info_cache_clear();
  
  // Clear the everything cache
  drupal_flush_all_caches();
 
  

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($producer_menu = menu_load('producer')) {
      ddl('deleting producer menu');
      menu_delete($producer_menu);
    }
  }
  
  // Rebuild the menu  
  menu_rebuild();
  
  //drupal_set_message(t('The menu router has been rebuilt on the uninstall of \'producer\'.'));
    
}

/**
* Implements hook_install().
*
* This hook is called when the user not only has disabled the module,
* but also uninstalls it from the 'uninstall' tab in the module page.
*
* So it's a perfect time to remove our fields and instances and new
* node type from the database.
*
* @ingroup twcontent
*/
function producer_install() {

  ddl('producer_install()');
}


/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup producer
 */
function producer_enable() {
  ddl('producer_enable()');

   //producer_install();
}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup producer
 */
function producer_disable() {
  ddl('producer_disable()');

  //producer_uninstall();
}


/**
 * Implements hook_schema().
 */
function producer_schema() {
  $schema = array();

  $schema['producer'] = array(
    'description' => 'The base table for producer entities.',
    'fields' => array(
      'producer_id' => array(
        'description' => 'Primary Key: Identifier for a producer.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {producer_type}.type of this producer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the producer.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the producer - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the producer was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the producer was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('producer_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['producer_type'] = array(
    'description' => 'Stores information about defined producer types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique producer type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this producer type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this producer type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this producer type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this producer type.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}