<?php

/**
 *@file
 * Implementes the member functionality required to create an entity and display it.
 */



/**
* Implements hook_menu_local_tasks_alter().
*/

/*
function member_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/models/add' on 'admin/structure/models'.
  if ($root_path == 'admin/content/members') {
    $item = menu_get_item('admin/content/members/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}
*/


/**
 * Implements hook_entity_info()
 *
 * We let Drupal know about our entity via this functions - have a look at
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_entity_info/7
 * for all the information.
 * Below we do the member to get an entity with one bundle going.
 */
function member_entity_info() {
  $member_info['member'] = array(
    // A human readable label to identify our entity.
    'label' => t('Member Entity'),
    // The controller for our Entity - extends the Drupal core controller.
    'controller class' => 'MemberController',
    // The table defined in hook_schema()
    'base table' => 'member',
    // Returns the uri elements of an entity
    'uri callback' => 'member_uri',
    // Fieldable that we can attach fields to it - the core functionality will
    // do the heavy lifting here.
    'fieldable' => TRUE,
    // The unique key of our base table.
    'entity keys' => array(
      'id' => 'member_id',
    ),
    
    
    //'label callback' => 'entity_class_label',
    //'uri callback' => 'entity_class_uri',
    //'creation callback' => 'model_create',
    'access callback' => 'member_access',
    'module' => 'member',
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
  
  
    'admin ui' => array(
          'path' => 'admin/content/members',
          'file' => 'member.admin.inc',
          'controller class' => 'MemberUIController',
          'menu wildcard' => '%member',
    ),
  
    
    // FALSE disables caching -  caching functionality is handled by Drupal core
    'static cache' => TRUE,
    // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
    'bundles' => array(
      'member' => array(
        'label' => 'Member',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/member/manage',
          'access arguments' => array('administer member entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context. We simply have one option
    // here but an alternative would be to have a Full and Teaser mode akin to node.
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $member_info;
}

/**
 * Fetch a member object. Make sure that the wildcard you choose
 * in the member entity definition fits the function name here.
 *
 * @param $member_id
 *   Integer specifying the member entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $member object or FALSE if it cannot be loaded.
 *
 * @see member_load_multiple()
 */
function member_load($member_id = NULL, $reset = FALSE) {
  $member_ids = (isset($member_id) ? array($member_id) : array());
  $member = member_load_multiple($member_ids, $reset);
  return $member ? reset($member) : FALSE;
}


/**
 * Loads multiple member entities based on certain conditions
 */
function member_load_multiple($member_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('member', $member_ids, $conditions, $reset);
}



/**
 * Implementing the uri callback defined
 */
function member_uri($member) {
  return array(
    'path' => 'member/' . $member->member_id,
  );
}


/**
 * Implements hook_menu()
 */
function member_menu() {
  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in member_entity_info() above.
  $items['admin/structure/member/manage'] = array(
    'title' => 'Member Entity Admin',
    'description' => 'Manage Member Entities Structure',
    'page callback' => 'member_admin_page',
    'access arguments' => array('administer member entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in member_uri and will use load_member to retrieve
  // the necessary entity info.
  $items['member/%member'] = array(
    'title callback' => 'member_page_title',
    'title arguments' => array(1),
    'page callback' => 'member_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view member entities'),
    'type' => MENU_CALLBACK,
  );

  // This defines a place for us to add member entities
  $items['member/add'] = array(
    'title' => 'Add a Member Entity',
    'page callback' => 'member_add',
    'access arguments' => array('create member entities'),
  );

  return $items;
}


/**
 * Implements hook_permission()
 */
function example_entity_permission() {
    return array(
    'administer member entities' =>  array(
      'title' => t('Administer member entities'),
      'restrict access' => TRUE,
    ),
    'view member entities' => array(
      'title' => t('View Member Entities'),
    ),
    'create member entities' => array(
      'title' => t('Create Member Entities'),
    ),

  );
}


/**
 * Just provide some member info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function member_admin_page() {
  $output = 'Welcome to the administration page for your Member Entities.<br/>';

  $output .= '<a href="/member/add">Add Member</a>';

  dpm(member_load_multiple());

  return $output;
}

/**
 * Callback for title
 */
function member_page_title($member) {
  return $member->name;
}

/**
 * Callback for displaying the entity
 */
function member_page_view($member, $view_mode = 'full') {

  $member->content = array();

  // Build fields content - this where the FieldAPI really comes in to play. The task
  // is relatively trivial for us - it all gets taken care of by Drupal core.
  field_attach_prepare_view('member', array($member->member_id => $member), $view_mode);
  entity_prepare_view('member', array($member->member_id => $member));
  $member->content += field_attach_view('member', $member, $view_mode);
  drupal_set_title($member->name);
  return $member->content;
}



/**
 * Implemnts hook_field_extra_fields()
 *
 * This exposes the other column of our entity (i.e. name) as a pseudo-field
 * so that it gets handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function member_field_extra_fields() {
  $return = array();
  $return['member']['name'] = array(
    'form' => array(
      'name' => array(
        'label' => t('name'),
        'description' => t('Member Entity Name'),
      ),
    ),
  );

  return $return;
}


/**
 * Creates a member entity for us - simply intializing the main variables and
 * sending us to a form to add in the rest.
 */
function member_add() {
  $member = (object) array(
    'member_id' => '',
    'type' => 'member',
    'name' => '',
  );

  return drupal_get_form('member_add_form', $member);
}


/**
 * Form callback: allows us to create a member entity.
 *
 * As you can see below the pattern followed is:
 * 1. Set up the form for the data that is specific to your
 * entity - typically the columns of your bas table.
 * 2. Call on the Field API to pull in the form elements
 * for fields attached to the entity.
 */
function member_add_form($form, &$form_state, $member) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
  );

  field_attach_form('member', $member, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );

  return $form;
}


/**
 * Form callback: Validates member_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function member_add_form_validate($form, &$form_state) {
  $member_submission = (object) $form_state['values'];
  field_attach_form_validate('member', $member_submission, $form, $form_state);
}


/**
 * Form callback: submits member_add_form information
 */
function member_add_form_submit($form, &$form_state) {
  $member_submission = (object) $form_state['values'];
  field_attach_submit('member', $member_submission, $form, $form_state);
  $member = member_save($member_submission);
  $form_state['redirect'] = 'member/' . $member->member_id;
}


/**
 * We save the member entity by calling the controller.
 */
function member_save(&$member) {
  return entity_get_controller('member')->save($member);
}


/**
 * MemberController extends the DrupalDefaultEntityController by adding
 * an extra function to handle saving of entities.
 */
class MemberController extends DrupalDefaultEntityController{

 /**
  * Saves the member entity mathching custom fields via drupal_write_record()
  */
 public function save($member) {
    drupal_write_record('member', $member);
    field_attach_insert('member', $member);
    module_invoke_all('entity_insert', 'member', $member);
    return $member;
  }
}


/**
* UI controller.
*/
class MemberUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults. Main reason for doing this is that
   * parent class hook_menu() is optimized for entity type administration.
   */
  public function hook_menu() {

    $items = array();
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%' . $this->entityType;

    $items[$this->path] = array(
      'title' => 'Members',
      'description' => 'Add edit and update members.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    );

    // Change the overview menu type for the list of members.
    $items[$this->path]['type'] = MENU_LOCAL_TASK;

    // Change the add page menu to multiple types of entities
    $items[$this->path . '/add'] = array(
      'title' => 'Add a member',
      'description' => 'Add a new member',
      'page callback'  => 'member_add_page',
      'access callback'  => 'member_access',
      'access arguments' => array('edit'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 20,
      'file' => 'member.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])

    );

    /*
    // Add menu items to add each different type of entity.
    foreach (member_get_types() as $type) {
      $items[$this->path . '/add/' . $type->type] = array(
        'title' => 'Add ' . $type->label,
        'page callback' => 'member_form_wrapper',
        'page arguments' => array(member_create(array('type' => $type->type))),
        'access callback' => 'member_access',
        'access arguments' => array('edit', 'edit ' . $type->type),
        'file' => 'member.admin.inc',
        'file path' => drupal_get_path('module', $this->entityInfo['module'])
      );
    }
*/
    // Loading and editing member entities
    $items[$this->path . '/member/' . $wildcard] = array(
      'page callback' => 'member_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'member_access',
      'access arguments' => array('edit', $id_count + 1),
      'weight' => 0,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'member.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
    $items[$this->path . '/member/' . $wildcard . '/edit'] = array(
      'title' => 'Edit',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $items[$this->path . '/member/' . $wildcard . '/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'member_delete_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'member_access',
      'access arguments' => array('edit', $id_count + 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 10,
      'file' => 'member.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );

    // Menu item for viewing members
    $items['member/' . $wildcard] = array(
    //'title' => 'Title',
      'title callback' => 'member_page_title',
      'title arguments' => array(1),
      'page callback' => 'member_page_view',
      'page arguments' => array(1),
      'access callback' => 'member_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
    );
    return $items;
  }


  /**
   * Create the markup for the add Member Entities page within the class
   * so it can easily be extended/overriden.
   */
  public function addPage() {
    $item = menu_get_item();
    $content = system_admin_menu_block($item);

    if (count($content) == 1) {
      $item = array_shift($content);
      drupal_goto($item['href']);
    }

    return theme('member_add_list', array('content' => $content));
  }

}



/**
 * Implements hook_help().
 */
function member_help($path, $arg) {
  switch ($path) {
    case 'admin/help#member':
      return "<p>" . t('The ThumbWhere Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin tempus mi ut risus fringilla a posuere quam feugiat. Mauris interdum, dui at eleifend rutrum, lacus risus aliquet arcu, ut eleifend magna augue a ligula. Nam accumsan suscipit volutpat. Suspendisse ut eros tempus purus suscipit placerat. Cras sed ipsum ligula. Pellentesque enim ligula, vehicula et fringilla eget, tincidunt vel magna. Nullam arcu sapien, interdum et pharetra at, ultrices nec nisi. Vivamus eleifend sollicitudin ligula, non auctor urna tincidunt sed "admin/structure/member/manage"') . "</p>";
  }
}
