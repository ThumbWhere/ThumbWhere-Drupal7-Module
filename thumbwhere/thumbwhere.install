<?php



/**
* @file
 * Install file for Node Example module.
 *
 * The definition of the fields for the module is here,
 *
 * @see http://drupal.org/node/707832
 * @see http://drupal.org/node/443536
 * @see field
 */


function thumbwhere_boot()
{
  debug("Booting ThumbWhere Moduke");
  $handle = background_process_start('thumbwhere_background_probe');
}

function thumbwhere_background_probe()
{
  debug('thumbwhere_background_probe');
}


/**
* Implements hook_requirements().
*
* We want to check for settings that we want to check on or issue any warnings.
*
*/
function thumbwhere_requirements($phase) {

  $requirements = array();

  $t = get_t();

  // Handle runtime check
  if ($phase == 'runtime') {

    if (variable_get('thumbwhere_api_url') == '') {

      $requirements['thumbwhere_api_url'] = array(
          'title' => $t('ThumbWhere API'),
          'description' => $t(' The configuration variable "thumbwhere_api_url" should be configured. <p/> Go to the Configuration for <b>ThumbWhere Settings</b> and enter the correct value.'),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    if (variable_get('thumbwhere_api_key') == '') {

      $requirements['thumbwhere_api_key'] = array(
          'title' => $t('ThumbWhere API'),
					'description' => $t(' The configuration variable "thumbwhere_api_key" should be configured. <p/> Go to the Configuration for <b>ThumbWhere Settings</b> and enter the correct value.'),            'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    if (variable_get('thumbwhere_master_console') == '1' )
    {
      if (variable_get('thumbwhere_master_key') == '') {

        $requirements['thumbwhere_master_key'] = array(
                'title' => $t('ThumbWhere API'),
    			  		'description' => $t(' The configuration variable "thumbwhere_master_key" should be configured. <p/> This server is configured as a thumbwhere master consile so the "thumbwhere_master_key" needs to be configured. Go to the Configuration for <b>ThumbWhere Settings</b> and enter the correct value or turn the Master Console functions off..'),            'severity' => REQUIREMENT_ERROR,
              	'value' => $t('Required configuration'),
        );
      }
    }
  }

  return $requirements;
}


/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 * @ingroup twcontent
 */
function thumbwhere_install() {

  // New module weights in core: put devel as the very last in the chain.
  //db_query("UPDATE {system} SET weight = 10 WHERE name = 'thumbwhere'");

  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // Install our user roles
  $user_roles = _thumbwhere_get_user_roles();
  foreach ($user_roles as $role_name => $role) {
    user_role_save($role);
  }


  foreach (_thumbwhere_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_grant_permissions($rid, $permissions);
    }
  }



  /*
  // We define the node type as an associative array.
  $twcontent = array(
    'type' => 'twcontent',
    'name' => $t('ThumbWhere Content'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('Represents a Content Entity in ThumbWhere. Content can be for example a Video, Image or Audio Entity.'),
    'title_label' => $t('Example Title'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($twcontent);

  //We add a body field and set the body label immediately.
  //node_add_body_field($content_type, $t('Example Description'));


  // Save the content type
  node_type_save($content_type);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  //$body_instance = field_info_instance('node', 'body', 'twcontent');

  //As an alternative for node_add_body_field($type, $label = 'Body')
  //the 'label'-key can be used to set the body label on the field instance
  //$body_instance['label'] = $t('Example Description');

  // Add our example_node_list view mode to the body instance display by
  // instructing the body to display as a summary
 // $body_instance['display']['twcontent_list'] = array(
 //   'label' => 'hidden',
 //   'type' => 'text_summary_or_trimmed',
 // );

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
 // field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_twcontent_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_twcontent_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $twcontent['type'];
    field_create_instance($instance);
  }
	*/

  //
  // Install our menu
  //


  // Create a custom menu, if Menu module is enabled.
  // @see thumbwhere_modules_installed()

  /*
  if (module_exists('menu')) {
    $menu = array(
        'menu_name' => 'thumbwhere',
        'title' => $t('ThumbWhere'),
        'description' => $t('ThumbWhere link'),
    );
    menu_save($menu);
  }
 */

}
/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup twcontent
 */
function thumbwhere_uninstall() {

  // Delete our user roles
  $user_roles = _thumbwhere_get_user_roles();
  foreach ($user_roles as $role_name => $role) {
    user_role_delete($role);
  }


  // Detach permissions to each of the roles for this content type
  foreach (_thumbwhere_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_revoke_permissions($rid, $permissions);
    }
  }


  /*
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'twcontent'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_twcontent_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the twcontent
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'twcontent');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('twcontent');
  */

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  //field_purge_batch(1000);

  //
  // Uninstall the Menu
  //

  // Delete the development menu.
  if (module_exists('menu')) {
    if ($devel_menu = menu_load('thumbwhere')) {
      menu_delete($devel_menu);
    }
  }
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * twcontent_install() and twcontent_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup twcontent
 */
/*
function _twcontent_installed_fields() {
  $t = get_t();
  return array(
    'twcontent_color' => array(
      'field_name' => 'twcontent_color',
      'cardinality' => 3,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
    ),
    'twcontent_quantity' => array(
      'field_name'  => 'twcontent_quantity',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'twcontent_image' => array(
      'field_name' => 'twcontent_image',
      'type'       => 'image',
      'cardinality' => 1,
    ),
  );
}
*/

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "twcontent_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * twcontent_install() and twcontent_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup twcontent
 */
/*
function _twcontent_installed_instances() {
  $t = get_t();
  return array(
    'twcontent_color' => array(
      'field_name' => 'twcontent_color',
      'label'       => $t('The colors available for this object.'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'twcontent_colors',
        ),
      ),
    ),
    'twcontent_quantity' => array(
      'field_name'  => 'twcontent_quantity',
      'label' => $t('Quantity required'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'twcontent_image' => array(
      'field_name'  => 'twcontent_image',
      'label'       => $t('Upload an image:'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ),
      ),
    ),
  );
}
*/

/**
* Implements hook_enable().
*
* Called when the module is enabled
*
* @ingroup thumbwhere
*/
function thumbwhere_enable() {

}

/**
* Implements hook_disable().
*
* Called when the module is disabled
*
* @ingroup thumbwhere
*/
function thumbwhere_disable() {
}


function thumbwhere_field_schema($field) {
   return array(
     'columns' => array(
     'thumbwhere_id' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
        //'default'  => -1,
        ),
     ),
 );
}


/**
 * Returns a structured array defining the user roles.
 *
 * @return
 *  An associative array specifying the user roles that are used by this module.
 *
 * @ingroup thumbwhere
 */
function _thumbwhere_get_user_roles() {
  return array(
      'notification' => (object) array(
          'name' => 'notification',
          'weight' => 3,
      )
  );
}


/**
 * Returns a structured array defining the permission for each role.
 *
 * @return
 *  An associative array specifying the permissions for each role
 *
 * @ingroup track
 */
function _thumbwhere_get_permissions() {
  return array(/*
      'anonymous user' => array(
          'view field_unearthed_tags',
          'view field_unearthed_genre_primary',
          'view field_unearthed_genres_secondary',
          'view field_unearthed_played',
      ),
      'authenticated user' => array(
          'edit field_unearthed_tags',
          'view field_unearthed_tags',
          'view field_unearthed_genre_primary',
          'view field_unearthed_genres_secondary',
          'view field_unearthed_played',
      ),
      'staff' => array(
          'access administration menu',
          'access administration pages',
          'access content overview',
          'access overlay',
          'access site in maintenance mode',
          'administer comments',
          'delete terms in 1',
          'edit field_unearthed_genre_primary',
          'edit field_unearthed_genres_secondary',
          'edit field_unearthed_played',
          'edit field_unearthed_tags',
          'edit own comments',
          'edit terms in 1',
          'revert revisions',
          'view field_unearthed_tags',
          'view field_unearthed_genre_primary',
          'view field_unearthed_genres_secondary',
          'view field_unearthed_played',
          'view own unpublished content',
          'view revisions',
          'view the administration theme',
      ),
      'operations' => array(
          'access administration menu',
          'access administration pages',
          'access content overview',
          'access overlay',
          'access site in maintenance mode',
          'access site reports',
          'administer blocks',
          'administer comments',
          'block IP addresses',
          'delete terms in 1',
          'delete terms in 2',
          'delete terms in 3',
          'edit field_unearthed_genre_primary',
          'edit field_unearthed_genres_secondary',
          'edit field_unearthed_played',
          'edit field_unearthed_tags',
          'edit own comments',
          'edit terms in 1',
          'edit terms in 2',
          'edit terms in 3',
          'flush caches',
          'revert revisions',
          'view field_unearthed_tags',
          'view field_unearthed_genre_primary',
          'view field_unearthed_genres_secondary',
          'view field_unearthed_played',
          'view own unpublished content',
          'view revisions',
          'view the administration theme',
      ),
      'administrator' => array(
          'delete terms in 1',
          'delete terms in 2',
          'delete terms in 3',
          'edit terms in 1',
          'edit terms in 2',
          'edit terms in 3',
      ),*/
  );
}

