<?php

/**
 * Implement hook_permission().
 */
function entity_autocomplete_permission() {
  return array(
    'use entity autocomplete' => array(
      'title' => t('Use Entity Autocomplete'),
      'description' => t('Access this autocomplete path. Warning: gives visibility to all entities.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function entity_autocomplete_menu() {
  $items['entity-autocomplete'] = array(
    'title' => 'Node Autocomplete',
    'access arguments' => array('use entity autocomplete'),
    'access callback' => 'user_access',
    'page callback' => 'entity_autocomplete',
    'type' => MENU_CALLBACK
  );
  $items['entity-autocomplete/bundle'] = array(
    'title' => 'Node Autocomplete',
    'access arguments' => array('use entity autocomplete'),
    'access callback' => 'user_access',
    'page callback' => 'entity_autocomplete_by_bundle',
    'type' => MENU_CALLBACK
  );
  return $items;
}
/**
 * Autocomplete callback for all entity types
 */
function entity_autocomplete($type, $string = '') {
  $entity_type = entity_get_info($type);
  $table = $entity_type['base table'];
  $id_field = $entity_type['entity keys']['id'];
  $label_field = $entity_type['entity keys']['label'];

  $matches = array();
  if ($string) {
    $query = db_select($table, 'n');
    $query->addField('n', $id_field, 'id');
    $query->addField('n', $label_field, 'label');
    $query->condition('n.'.$label_field, '%' . $string . '%', 'LIKE');

    $result = $query->execute();
    $data = array();
    foreach ($result->fetchAll() as $entity) {
      $label = check_plain($entity->label);
      $label .= ' [id:' . $entity->id . ']';
      $matches[$label] = $label;
    }
  }
  drupal_json_output($matches);
}

/**
 * Autocomplete callback for all entity types restricted by bundle
 */
function entity_autocomplete_by_bundle($type, $bundles_in, $string = '') {
  
  $entity_type = entity_get_info($type);
  $table = $entity_type['base table'];
  $id_field = $entity_type['entity keys']['id'];
  $label_field = $entity_type['entity keys']['label'];
  $bundle_field = $entity_type['entity keys']['bundle'];

  $matches = array();
  if ($string) {
    //Handle taxonomy seperately as its bundles work differently
    if($type == 'taxonomy_term') {
      $vocabs = taxonomy_get_vocabularies();
      $vids = array();
      foreach($vocabs as $vid=>$vocab){
        $vids[$vocab->machine_name] = $vid;
      }

      $bundles = array();
      foreach(explode("+", $bundles_in) as $bundle) {
        if(isset($vids[$bundle])) {
          $bundles[] = "'$vids[$bundle]'";
        }
      }

      $bundle_field = 'vid';
    } else {
      $bundles = array();
      foreach(explode("+", $bundles_in) as $bundle) {
        $bundles[] = "'$bundle'";
      }
     
    }
    $bundle_string = implode(',', $bundles);
    $query = db_select($table, 'n');
    $query->addField('n', $id_field, 'id');
    $query->addField('n', $label_field, 'label');
    $query->condition('n.'.$label_field, '%' . $string . '%', 'LIKE');
    
    if ($bundle_string) {
      $query->where("n.$bundle_field in ($bundle_string)");
    }  
    $result = $query->execute();
    $data = array();
    foreach ($result->fetchAll() as $entity) {
      $label = entity_autocomplete_get_label($entity->label, $entity->id);
      $matches[$label] = $label;
    }
  }
  drupal_json_output($matches);

}

/* function to properly build the label to be return to the calling textbox
 * makign sure it is 128 chars max in length
 */
function entity_autocomplete_get_label($label, $id){
  $label = check_plain($label);
  $max = 123;
  $ref_id = ' [id:' . $id . ']';
  $ref_id_length = strlen($ref_id);
  if (strlen($label) >= ( $max - $ref_id_length )) {
    $label = substr_replace($label, ' ...', ($max - $ref_id_length));
  }
  return $label . $ref_id;
}

/*
 * function to extract an id from a string return from one of the autocomplete callbacks
 *
 * PARAM value: a string of the form "title [id:ID]" or an int
 * RETURN an int of the id
 */
function entity_autocomplete_get_id($value) {
  if(is_numeric($value)) {
    return $value;
  }
  else{
    return preg_replace("/.*\[id:(.*)\].*/", '${1}', $value);
  }
}
