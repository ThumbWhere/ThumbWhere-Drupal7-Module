<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 *
 * NOTE: This has been autogenerated.
 */

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_contentingest
 */
function thumbwhere_contentingest_uninstall() {

  // Delete the permissions
  foreach (_thumbwhere_contentingest_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_revoke_permissions($rid, $permissions);
    }
  }


  //
  // Uninstall all the field info
  //

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($thumbwhere_contentingest_menu = menu_load('thumbwhere_contentingest')) {
      menu_delete($thumbwhere_contentingest_menu);
    }
  }

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_install().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_contentingest
 */
function thumbwhere_contentingest_install() {

 // Create the permissions
  foreach (_thumbwhere_contentingest_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_grant_permissions($rid, $permissions);
    }
  }


  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

  // Entity provided by ThumbWhere gets a weight of 12. Storage = 11 and ThumbWere itself, 10
  //db_query("UPDATE {system} SET weight = 12 WHERE name = 'thumbwhere_contentingest'");

}

/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup thumbwhere_contentingest
 */
function thumbwhere_contentingest_enable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup thumbwhere_contentingest
 */
function thumbwhere_contentingest_disable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();
}

/**
 * Implements hook_schema().
 *
 *
 * This is where we define the schema for our entity.
 *
 * This results in a table being created called 'thumbwhere_contentingest'
 *
 * thumbwhere_contentingest_id
 * The primary key used by
 *
 * pk_contentingest
 * Used to map to the actual object in ThumbWhere.
 */
function thumbwhere_contentingest_schema() {
  $t = get_t();

  $schema = array();

  $schema['thumbwhere_contentingest'] = array(
  'description' => 'The base table for thumbwhere_contentingest entities.' . 'Content Ingest Ingests content from the specified url for the specified Producer The media will be owned by this producer when it is uploaded fk_member is the individual member making the actual upload. fk_mediaitem is the actual media item that will be uploaded. fk_content The content placeholder we are targetting. url is the url being uploaded. size is the size of the uploaded file. uploaded if true then we have completed upload transcoded if true then the media has been transoded encrypted if true then the media has been encrypted deployed if true then the media has been deployed to storage error if true then there was an error TODO: in xslt get output_repository_check_entity_before_map to know if beiong used ion create. default value = can be null.',
    'fields' => array(
          'pk_contentingest' => array(
              'description' => 'ThumbWhere Id: ThumbWhere\'s Primary key this entity. Represents the id of this entity in the ThumbWhere \'ThumbWhereContentIngests\' entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => TRUE,
              'default' => -1,
          ),
          'fk_mediaitem' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'MediaItem\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_content' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Content\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_member' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Member\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'url' => array(
              'description' => 'The \'url\' textfield field of the \'ContentIngest\' entity.',
              'type' => 'varchar',
              'size' => 'normal',
              'length' => 128,
              'not null' => FALSE,                  
          ),
          'size' => array(
              'description' => 'The \'size\' textfield field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,                  
          ),
          'uploaded' => array(
              'description' => 'The \'uploaded\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'transcoded' => array(
              'description' => 'The \'transcoded\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'encrypted' => array(
              'description' => 'The \'encrypted\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'deployed' => array(
              'description' => 'The \'deployed\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'ready' => array(
              'description' => 'The \'ready\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'error' => array(
              'description' => 'The \'error\' checkbox field of the \'ContentIngest\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'status' => array(
              'description' => 'The \'status\' textfield field of the \'ContentIngest\' entity.',
              'type' => 'varchar',
              'size' => 'normal',
              'length' => 128,
              'not null' => FALSE,
              'default' => 'pending',                  
          ),      
      ),
      'primary key' => array(
          'pk_contentingest'      
      ),      
      'indexes' => array(
          'pk_contentingest' => array(
              'pk_contentingest'
          ),
          'fk_mediaitem' => array(
              'fk_mediaitem'
          ),
          'fk_content' => array(
              'fk_content'
          ),
          'fk_member' => array(
              'fk_member'
          ),
      
      ),
  );

  return $schema;
}


/**
 * Returns a structured array defining the permission for each role.
 *
 * @return
 *  An associative array specifying the permissions for each role
 *
 * @ingroup track
 */
function _thumbwhere_contentingest_get_permissions() {
  return array(
      'anonymous user' => array(
          'send thumbwhere contentingest notifications',
      ),
      'authenticated user' => array(
          'send thumbwhere contentingest notifications',
      ),      
      'administrator' => array(
          'send thumbwhere contentingest notifications',
      ),
  );
}


