<?php

// ******************************************************************
// This file was generated by autogen_model_implementation_drupal.xsl
// ******************************************************************

// Include the ThumbWhere SDK
require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'dependencies' . DIRECTORY_SEPARATOR . 'tw' . DIRECTORY_SEPARATOR . 'sdk.class.php');

/**
 * @file
 * Module for the ThumbWhere ContentCollection Entity
 *
 *
 * NOTE: This has been autogenerated.
 * 
 */

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function thumbwhere_contentcollection_entity_info() {
  $return['thumbwhere_contentcollection'] = array(

    // The human-readable name of the type.
    'label' => t('ThumbWhereContentCollection'),

    // (used by DrupalDefaultEntityController) The name of the entity type's base table.
    'base table' => 'thumbwhere_contentcollection',

    // fieldable: Set to TRUE if you want your entity type to accept fields being attached to it.
    'fieldable' => TRUE,

  // Declare the endty keys..
    'entity keys' => array(
      'id' => 'pk_contentcollection',
      'label' => 'title',
    ),

    // A function taking an entity and an entity type as arguments and returning the label of the entity.
    // The entity label is the main string associated with an entity; for example, the title of a node or
    // the subject of a comment. If there is an entity object property that defines the label, use the
    // 'label' element of the 'entity keys' return value component to provide this information (see below).
    // If more complex logic is needed to determine the label of an entity, you can instead specify a callback
    // function here, which will be called to determine the entity label. See also the entity_label()
    // function, which implements this logic.
    'label callback' => 'entity_class_label',

    // A function taking an entity as argument and returning the uri elements of the entity, e.g. 'path' and 'options'.
    // The actual entity uri can be constructed by passing these elements to url().
    'uri callback' => 'entity_class_uri',

    //
    // Entity API Components
    //

    // The module whwre we can find our classes
    'module' => 'thumbwhere_contentcollection',

    // The entity class and controller class extend the classes provided by the Entity API
    'entity class' => 'ThumbWhereContentCollection',

    // Which Entity API contoller
    'controller class' => 'ThumbWhereContentCollectionController',

    // The information below is used by the ThumbWhereContentCollectionUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/thumbwhere/thumbwhere_contentcollections',
      'file' => 'thumbwhere_contentcollection.admin.inc',
      'controller class' => 'ThumbWhereContentCollectionUIController',
      'menu wildcard' => '%thumbwhere_contentcollection',
    ),
  );

  return $return;
}


/**
 * Implements hook_permission().
 */
function thumbwhere_contentcollection_permission() {

  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer thumbwhere_contentcollections' => array(
      'title' => t('Administer thumbwhere_contentcollections'),
      'description' => t('Edit and delete all thumbwhere_contentcollections'),
    ),
  'send thumbwhere contentcollection notifications' => array(
          'title' => t('Send ThumbWhere Notifications'),
          'description' => t('Allow the caller to call the ThumbWhere ContentCollection Entity Notifications Endpoint.'),
          'restrict access' => TRUE,
      ),    
  );

  return $permissions;
}


/**
 * Determines whether the given user has access to a thumbwhere_contentcollection.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $thumbwhere_contentcollection
 *   Optionally a thumbwhere_contentcollection or a thumbwhere_contentcollection type to check access for. If nothing is
 *   given, access for all thumbwhere_contentcollections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function thumbwhere_contentcollection_access($op, $thumbwhere_contentcollection = NULL, $account = NULL) {

  //if (user_access('administer thumbwhere_contentcollections', $account)) {
  //  return TRUE;
 // }

  //return FALSE;
  return TRUE;
}




/**
 * Fetch a thumbwhere_contentcollection object. Make sure that the wildcard you choose
 * in the thumbwhere_contentcollection entity definition fits the function name here.
 *
 * @param $thumbwhere_contentcollection_id
 *   Integer specifying the thumbwhere_contentcollection id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $thumbwhere_contentcollection object or FALSE if it cannot be loaded.
 *
 * @see thumbwhere_contentcollection_load_multiple()
 */
function thumbwhere_contentcollection_load($thumbwhere_contentcollection_id, $reset = FALSE) {

  $thumbwhere_contentcollections = entity_load('thumbwhere_contentcollection', array($thumbwhere_contentcollection_id), array(), $reset);

  return reset($thumbwhere_contentcollections);
}


/**
 * Deletes a thumbwhere_contentcollection.
 */
function thumbwhere_contentcollection_delete(ThumbWhereContentCollection $thumbwhere_contentcollection) {

  $thumbwhere_contentcollection->delete();
}

/**
 * Create a thumbwhere_contentcollection object.
 */
function thumbwhere_contentcollection_create($values = array()) {

  return entity_get_controller('thumbwhere_contentcollection')->create($values);
}


/**
 * URI callback for thumbwhere_contentcollections
 */
function thumbwhere_contentcollection_uri(ThumbWhereContentCollection $thumbwhere_contentcollection) {

  return array(
    'path' => 'thumbwhere_contentcollection/' . $thumbwhere_contentcollection->pk_contentcollection,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function thumbwhere_contentcollection_page_title(ThumbWhereContentCollection $thumbwhere_contentcollection) {

	return $thumbwhere_contentcollection->title;
}


/**
 * Sets up content to show an individual thumbwhere_contentcollection
 * @todo - get rid of drupal_set_title();
 */
function thumbwhere_contentcollection_page_view($thumbwhere_contentcollection, $view_mode = 'full') {



  $controller = entity_get_controller('thumbwhere_contentcollection');
  $content = $controller->view(array($thumbwhere_contentcollection->pk_contentcollection => $thumbwhere_contentcollection));
  drupal_set_title($thumbwhere_contentcollection->title);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function thumbwhere_contentcollection_views_api() {



  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'thumbwhere_contentcollection') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function thumbwhere_contentcollection_theme() {



  return array(
    'thumbwhere_contentcollection_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'thumbwhere_contentcollection.admin.inc',
    ),
    'thumbwhere_contentcollection' => array(
      'render element' => 'elements',
      'template' => 'thumbwhere_contentcollection',
    )
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function thumbwhere_contentcollection_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add action link 'admin/structure/thumbwhere_contentcollections/add' on 'admin/structure/thumbwhere_contentcollections'.
  if ($root_path == 'admin/thumbwhere/thumbwhere_contentcollections') {
    $item = menu_get_item('admin/thumbwhere/thumbwhere_contentcollections/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for thumbwhere_contentcollection entities
 */
class ThumbWhereContentCollection extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'thumbwhere_contentcollection');
  }

  protected function defaultLabel() {
    return $this->title;
  }

  protected function defaultUri() {
    return array('path' => 'thumbwhere_contentcollection/' . $this->pk_contentcollection);
  }


}



/**
 * The Controller for ThumbWhereContentCollection entities
 */
class ThumbWhereContentCollectionController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
}



/**
* Implements hook_entity_presave().
*
* Act on an ContentCollection entity before it is about to be created or updated.
*
* @param $entity
*   The entity object.
* @param $entity_type
*   The type of entity being saved (i.e. node, user, comment).
*/
function thumbwhere_contentcollection_entity_presave($entity, $entity_type) {

  // We only look after what we want...
  if ($entity_type == 'thumbwhere_contentcollection')  {
  	
  	
  	
 	/////////////////////////////////////////////////////
    //
    // Should we not propagate this to ThumbWhere? 
    //
    if (isset($entity->do_not_propagate)) {
      if ($entity->do_not_propagate) {
        if (twCanDebug()) {
          if ($entity->is_new) {
            debug("DO NOT PROPAGATE 'contentcollection' presave *CREATE*");
          }
          else {
            debug("DO NOT PROPAGATE 'contentcollection' presave *UPDATE*");
          }
        }

        // To cause an infinite loop of updates, comment out this line.
        return;
      }
      else if (twCanDebug()) {
        debug("OK PROAOGATE 'contentcollection' presave to ThumbWhere Server");
      }
    }
    else if (twCanDebug()) {
      debug("DO NOT PROPAGATE IS NOT SET");
    }
    //
    //
    ////////////////////////////////////////////////////////  	

  
    // .. then we create a new thumbwhere_contentcollection entity...
      // Instantiate the ThumbWhereContent class

    $twContentAPI = new ThumbWhereAPIContent();

    //if (twCanDebug()) debug($twContentAPI);

    //if (twCanDebug()) debug($entity);

    //
    // Collate and validate our fields
    //

    $fields = array();
    // Compulsory so..
    if (empty($entity->fk_actor)) {
      throw new Exception('actor is compulsory.');
    }
    else {
      $fields['actor'] = $entity->fk_actor;
    }

    // Not nullable but we have a default value
    if (empty($entity->title)) {
      $fields['title'] = $entity->title = 'Hello';
    }
    else {
      $fields['title'] = $entity->title;
    }
    
    //
    // If this contentcollection entity is new....
    //
    
    if ($entity->is_new) {
                

      //
      // ... then we create the contentcollection entity in ThumbWhere
      //

      $contentcollection = $twContentAPI->create_content_collection($context = array(
                  'key' => variable_get('thumbwhere_api_key')
          ), $fields);
            
       if (twCanDebug()) debug($contentcollection);

      //if (twCanDebug()) debug($content_collection);

      $attributes = $contentcollection->body->content_collection->attributes();

      if (twCanDebug()) debug('newly created id = ' . $attributes['id']);

      // Assign new id.
      $entity->pk_contentcollection = intval($attributes['id']);

      if (twCanDebug()) debug('$entity->pk_contentcollection = ' . $entity->pk_contentcollection);
    }
    else
    {
          	

      //
      // .. otherwise we update the contentcollection entity in ThumbWhere
      //

      $contentcollection = $twContentAPI->update_content_collection($id=$entity->pk_contentcollection,$context = array(
                  'key' => variable_get('thumbwhere_api_key')
          ), $fields);
            
        
    }
          	
    
  }
}

/**
 * Implements thumbwhere_contentcollection_entity_insert().
 *
 * Act on entities when inserted.
 *
 * @param $entity
 *   The entity object
 * @param $type
 *   The type of entity being inserted (i.e. node, user, comment).
 */
function thumbwhere_contentcollection_entity_insert($entity, $type) {

  // Flee if this is not the entity type we are looking for
  if ($type != 'thumbwhere_contentcollection') return;

}


/**
* Implements thumbwhere_contentcollection_entity_delete().
*
* Act on entities when inserted.
*
* @param $entity
*   The entity object
* @param $type
*   The type of entity being deleted (i.e. node, user, comment).
*/
function thumbwhere_contentcollection_entity_delete($entity, $type) {

  // Flee if this is not the entity type we are looking for
  if ($type != 'thumbwhere_contentcollection') return;


}
