<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 *
 * NOTE: This has been autogenerated.
 */

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_contentupload
 */
function thumbwhere_contentupload_uninstall() {

  // Delete the permissions
  foreach (_thumbwhere_contentupload_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_revoke_permissions($rid, $permissions);
    }
  }


  //
  // Uninstall all the field info
  //

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($thumbwhere_contentupload_menu = menu_load('thumbwhere_contentupload')) {
      menu_delete($thumbwhere_contentupload_menu);
    }
  }

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_install().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_contentupload
 */
function thumbwhere_contentupload_install() {

 // Create the permissions
  foreach (_thumbwhere_contentupload_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_grant_permissions($rid, $permissions);
    }
  }


  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

  // Entity provided by ThumbWhere gets a weight of 12. Storage = 11 and ThumbWere itself, 10
  //db_query("UPDATE {system} SET weight = 12 WHERE name = 'thumbwhere_contentupload'");

}

/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup thumbwhere_contentupload
 */
function thumbwhere_contentupload_enable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup thumbwhere_contentupload
 */
function thumbwhere_contentupload_disable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();
}

/**
 * Implements hook_schema().
 *
 *
 * This is where we define the schema for our entity.
 *
 * This results in a table being created called 'thumbwhere_contentupload'
 *
 * thumbwhere_contentupload_id
 * The primary key used by
 *
 * pk_contentupload
 * Used to map to the actual object in ThumbWhere.
 */
function thumbwhere_contentupload_schema() {
  $t = get_t();

  $schema = array();

  $schema['thumbwhere_contentupload'] = array(
  'description' => 'The base table for thumbwhere_contentupload entities.' . 'Content Upload Manages the upload of content. The media will be owned by the specified producer when it is uploaded fk_member The campaign this is part of. fk_member is the individual member making the actual upload. fk_identity is the specific identity that this media came in through (email, facebook etc). fk_producer The producer performing this upload. fk_consumer The consumer performing this upload. fk_content The content placeholder we are targetting. fk_mediaitemuploadpush is the push that is expecting this image upload. Once this is modified and is complete we can complete the upload of the content. fk_mediaitem is the actual media item that was created... size is the size of the uploaded file. uploaded if true then we have completed upload transcoded if true then the media has been transoded encrypted if true then the media has been encrypted deployed if true then the media has been deployed to storage error if true then there was an error',
    'fields' => array(
          'pk_contentupload' => array(
              'description' => 'ThumbWhere Id: ThumbWhere\'s Primary key this entity. Represents the id of this entity in the ThumbWhere \'ThumbWhereContentUploads\' entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => TRUE,
              'default' => -1,
          ),
          'fk_mediaitemuploadpush' => array(
          'description' => 'ThumbWhere Id: References a \'MediaItemUploadPush\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_mediaitem' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'MediaItem\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_content' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Content\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_member' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Member\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_identity' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Identity\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_producer' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Producer\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_consumer' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Consumer\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'size' => array(
              'description' => 'The \'size\' textfield field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,                  
          ),
          'uploaded' => array(
              'description' => 'The \'uploaded\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'transcoded' => array(
              'description' => 'The \'transcoded\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'encrypted' => array(
              'description' => 'The \'encrypted\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'deployed' => array(
              'description' => 'The \'deployed\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'ready' => array(
              'description' => 'The \'ready\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'error' => array(
              'description' => 'The \'error\' checkbox field of the \'ContentUpload\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'status' => array(
              'description' => 'The \'status\' textfield field of the \'ContentUpload\' entity.',
              'type' => 'varchar',
              'size' => 'normal',
              'length' => 128,
              'not null' => FALSE,
              'default' => 'pending',                  
          ),      
      ),
      'primary key' => array(
          'pk_contentupload'      
      ),      
      'indexes' => array(
          'pk_contentupload' => array(
              'pk_contentupload'
          ),
          'fk_mediaitemuploadpush' => array(
              'fk_mediaitemuploadpush'
          ),
          'fk_mediaitem' => array(
              'fk_mediaitem'
          ),
          'fk_content' => array(
              'fk_content'
          ),
          'fk_member' => array(
              'fk_member'
          ),
          'fk_identity' => array(
              'fk_identity'
          ),
          'fk_producer' => array(
              'fk_producer'
          ),
          'fk_consumer' => array(
              'fk_consumer'
          ),
      
      ),
  );

  return $schema;
}


/**
 * Returns a structured array defining the permission for each role.
 *
 * @return
 *  An associative array specifying the permissions for each role
 *
 * @ingroup track
 */
function _thumbwhere_contentupload_get_permissions() {
  return array(
      'anonymous user' => array(
          'send thumbwhere contentupload notifications',
      ),
      'authenticated user' => array(
          'send thumbwhere contentupload notifications',
      ),      
      'administrator' => array(
          'send thumbwhere contentupload notifications',
      ),
  );
}


