<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 *
 * NOTE: This has been autogenerated.
 */

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_externalrepositorysync
 */
function thumbwhere_externalrepositorysync_uninstall() {

  // Delete the permissions
  foreach (_thumbwhere_externalrepositorysync_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_revoke_permissions($rid, $permissions);
    }
  }


  //
  // Uninstall all the field info
  //

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($thumbwhere_externalrepositorysync_menu = menu_load('thumbwhere_externalrepositorysync')) {
      menu_delete($thumbwhere_externalrepositorysync_menu);
    }
  }

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_install().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_externalrepositorysync
 */
function thumbwhere_externalrepositorysync_install() {

 // Create the permissions
  foreach (_thumbwhere_externalrepositorysync_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_grant_permissions($rid, $permissions);
    }
  }


  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

  // Entity provided by ThumbWhere gets a weight of 12. Storage = 11 and ThumbWere itself, 10
  //db_query("UPDATE {system} SET weight = 12 WHERE name = 'thumbwhere_externalrepositorysync'");

}

/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup thumbwhere_externalrepositorysync
 */
function thumbwhere_externalrepositorysync_enable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup thumbwhere_externalrepositorysync
 */
function thumbwhere_externalrepositorysync_disable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();
}

/**
 * Implements hook_schema().
 *
 *
 * This is where we define the schema for our entity.
 *
 * This results in a table being created called 'thumbwhere_externalrepositorysync'
 *
 * thumbwhere_externalrepositorysync_id
 * The primary key used by
 *
 * pk_externalrepositorysync
 * Used to map to the actual object in ThumbWhere.
 */
function thumbwhere_externalrepositorysync_schema() {
  $t = get_t();

  $schema = array();

  $schema['thumbwhere_externalrepositorysync'] = array(
  'description' => 'The base table for thumbwhere_externalrepositorysync entities.' . 'Request to sync a particular resource from an externalrepository.',
    'fields' => array(
          'pk_externalrepositorysync' => array(
              'description' => 'ThumbWhere Id: ThumbWhere\'s Primary key this entity. Represents the id of this entity in the ThumbWhere \'ThumbWhereExternalRepositorySyncs\' entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => TRUE,
              'default' => -1,
          ),
          'fk_externalsubscription' => array(
          'description' => 'ThumbWhere Id: References a \'ExternalSubscription\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'last_sync' => array(
              'description' => 'The \'last_sync\' date field of the \'ExternalRepositorySync\' entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,                  
          ),
          'max' => array(
              'description' => 'The \'max\' textfield field of the \'ExternalRepositorySync\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,                  
          ),
          'complete' => array(
              'description' => 'The \'complete\' checkbox field of the \'ExternalRepositorySync\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),      
      ),
      'primary key' => array(
          'pk_externalrepositorysync'      
      ),      
      'indexes' => array(
          'pk_externalrepositorysync' => array(
              'pk_externalrepositorysync'
          ),
          'fk_externalsubscription' => array(
              'fk_externalsubscription'
          ),
      
      ),
  );

  return $schema;
}


/**
 * Returns a structured array defining the permission for each role.
 *
 * @return
 *  An associative array specifying the permissions for each role
 *
 * @ingroup track
 */
function _thumbwhere_externalrepositorysync_get_permissions() {
  return array(
      'anonymous user' => array(
          'send thumbwhere externalrepositorysync notifications',
      ),
      'authenticated user' => array(
          'send thumbwhere externalrepositorysync notifications',
      ),      
      'administrator' => array(
          'send thumbwhere externalrepositorysync notifications',
      ),
  );
}


