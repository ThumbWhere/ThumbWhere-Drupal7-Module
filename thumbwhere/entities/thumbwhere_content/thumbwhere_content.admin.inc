<?php

/**
 * @file
 * ThumbWhereContent editing UI.
 *
 * We make very little use of the EntityAPI interface for this - preferring instead to use
 * views. That offers more flexibility to change a UI that will, more often than not,
 * be end-user facing.
 *
 * NOTE: This has been autogenerated.
 * 
 */




/**
 * Menu callback: React to a notifications for Content.
 */
function _thumbwhere_content_notify() {

  $content = array(
      'messages' => array(
          '#markup' => t('No messages.'),
          '#prefix' => '<div id="content-notification-table">',
          '#suffix' => '</div>',
      )
  );

  $data = array(
      'content' => drupal_render($content)
  );

  drupal_json_output($data);
}





/**
 * Content UI controller.
 */
class ThumbWhereContentUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults. Main reason for doing this is that
   * parent class hook_menu() is optimized for entity type administration.
   */
  public function hook_menu() {

    $items = array();
    
  	// Add a notification page...
    $items['thumbwhere/content/notify'] = array(
        'title' => 'Notifications Callback for "Content" Entity',
        'page callback' => '_thumbwhere_content_notify',
        'access arguments' => array(
            'send thumbwhere content notifications'
        ),
        'file' => 'thumbwhere_content.admin.inc',
        'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );    
    
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%' . $this->entityType;

    $items[$this->path] = array(
      'title' => 'ThumbWhereContents',
      'description' => 'Add edit and update thumbwhere_contents.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    );

    // Change the overview menu type for the list of thumbwhere_contents.
    $items[$this->path]['type'] = MENU_LOCAL_TASK;

    // Change the add page menu to multiple types of entities
    $items[$this->path . '/add'] = array(
      'title' => 'Add a thumbwhere_content',
      'description' => 'Add a new thumbwhere_content',
      'page callback'  => 'thumbwhere_content_add_page',
      'access callback'  => 'thumbwhere_content_access',
      'access arguments' => array('edit'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 20,
      'file' => 'thumbwhere_content.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])

    );

    $items[$this->path . '/add/' . 'thumbwhere_content'] = array(
      'title' => 'Add ' . 'ThumbWhereContent',
      'page callback' => 'thumbwhere_content_form_wrapper',
      'page arguments' => array(thumbwhere_content_create(array('type' => 'thumbwhere_content'))),
      'access callback' => 'thumbwhere_content_access',
      'access arguments' => array('edit', 'edit ' . 'thumbwhere_content'),
      'file' => 'thumbwhere_content.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );

    // Loading and editing thumbwhere_content entities
    $items[$this->path . '/thumbwhere_content/' . $wildcard] = array(
      'page callback' => 'thumbwhere_content_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'thumbwhere_content_access',
      'access arguments' => array('edit', $id_count + 1),
      'weight' => 0,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'thumbwhere_content.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
    $items[$this->path . '/thumbwhere_content/' . $wildcard . '/edit'] = array(
      'title' => 'Edit',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $items[$this->path . '/thumbwhere_content/' . $wildcard . '/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'thumbwhere_content_delete_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'thumbwhere_content_access',
      'access arguments' => array('edit', $id_count + 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 10,
      'file' => 'thumbwhere_content.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );

    // Menu item for viewing thumbwhere_contents
    $items['thumbwhere_content/' . $wildcard] = array(
      //'title' => 'Title',
      'title callback' => 'thumbwhere_content_page_title',
      'title arguments' => array(1),
      'page callback' => 'thumbwhere_content_page_view',
      'page arguments' => array(1),
      'access callback' => 'thumbwhere_content_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
    );
    return $items;
  }


  /**
   * Create the markup for the add ThumbWhereContent Entities page within the class
   * so it can easily be extended/overriden.
   */
  public function addPage() {
    $item = menu_get_item();
    $content = system_admin_menu_block($item);

    if (count($content) == 1) {
      $item = array_shift($content);
      drupal_goto($item['href']);
    }

    return theme('thumbwhere_content_add_list', array('content' => $content));
  }

}


/**
 * Form callback wrapper: create or edit a thumbwhere_content.
 *
 * @param $thumbwhere_content
 *   The thumbwhere_content object being edited by this form.
 *
 * @see thumbwhere_content_edit_form()
 */
function thumbwhere_content_form_wrapper($thumbwhere_content) {
  // Add the breadcrumb for the form's location.
  thumbwhere_content_set_breadcrumb();
  return drupal_get_form('thumbwhere_content_edit_form', $thumbwhere_content);
}


/**
 * Form callback wrapper: delete a thumbwhere_content.
 *
 * @param $thumbwhere_content
 *   The thumbwhere_content object being edited by this form.
 *
 * @see thumbwhere_content_edit_form()
 */
function thumbwhere_content_delete_form_wrapper($thumbwhere_content) {
  // Add the breadcrumb for the form's location.
  //thumbwhere_content_set_breadcrumb();
  return drupal_get_form('thumbwhere_content_delete_form', $thumbwhere_content);
}


/**
 * Form callback: create or edit a thumbwhere_content.
 *
 * @param $thumbwhere_content
 *   The thumbwhere_content object to edit or for a create form an empty thumbwhere_content object
 *     with only a thumbwhere_content type defined.
 */
function thumbwhere_content_edit_form($form, &$form_state, $thumbwhere_content) {

  // Add the default field elements.
  $form['fk_mediaitem'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereContent fk_mediaitem'),
    '#default_value' => isset($thumbwhere_content->fk_mediaitem) ? $thumbwhere_content->fk_mediaitem : '',
    '#maxlength' => 255,
   /// '#required' => TRUE,
    '#weight' => -5,
  );
  // Add the default field elements.
  $form['fk_metadata'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereContent fk_metadata'),
    '#default_value' => isset($thumbwhere_content->fk_metadata) ? $thumbwhere_content->fk_metadata : '',
    '#maxlength' => 255,
   /// '#required' => TRUE,
    '#weight' => -5,
  );
  // Add the default field elements.
  $form['fk_producer'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereContent fk_producer'),
    '#default_value' => isset($thumbwhere_content->fk_producer) ? $thumbwhere_content->fk_producer : '',
    '#maxlength' => 255,
   /// '#required' => TRUE,
    '#weight' => -5,
  );
  // Add the default field elements.
  $form['fk_contentingest'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereContent fk_contentingest'),
    '#default_value' => isset($thumbwhere_content->fk_contentingest) ? $thumbwhere_content->fk_contentingest : '',
    '#maxlength' => 255,
   /// '#required' => TRUE,
    '#weight' => -5,
  );
  // Add the default field elements.
    $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereContent title'),
    '#default_value' => isset($thumbwhere_content->title) ? $thumbwhere_content->title : '',
    '#maxlength' => 255,
   // '#required' => TRUE,
    '#weight' => -5,
  );



  $form['data']['#tree'] = TRUE;

  /*
  $form['data']['sample_data'] = array(
    '#type' => 'checkbox',
    '#title' => t('An interesting thumbwhere_content switch'),
    '#default_value' => isset($thumbwhere_content->data['sample_data']) ? $thumbwhere_content->data['sample_data'] : 1,
  );
	*/


  // Add the field related form elements.
  $form_state['thumbwhere_content'] = $thumbwhere_content;
  field_attach_form('thumbwhere_content', $thumbwhere_content, $form, $form_state);

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save thumbwhere_content'),
    '#submit' => $submit + array('thumbwhere_content_edit_form_submit'),
  );

  // Do we show the delete button?
  if (!empty($thumbwhere_content->pk_content)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete thumbwhere_content'),
      '#suffix' => l(t('Cancel'), 'admin/content/thumbwhere_contents'),
      '#submit' => $submit + array('thumbwhere_content_form_submit_delete'),
      '#weight' => 45,
    );
  }

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'thumbwhere_content_edit_form_validate';
  return $form;
}


/**
 * Form API validate callback for the thumbwhere_content form
 */
function thumbwhere_content_edit_form_validate(&$form, &$form_state) {
  $thumbwhere_content = $form_state['thumbwhere_content'];

  // Notify field widgets to validate their data.
  field_attach_form_validate('thumbwhere_content', $thumbwhere_content, $form, $form_state);
}


/**
 * Form API submit callback for the thumbwhere_content form.
 *
 * @todo remove hard-coded link
 */
function thumbwhere_content_edit_form_submit(&$form, &$form_state) {

  $thumbwhere_content = entity_ui_controller('thumbwhere_content')->entityFormSubmitBuildEntity($form, $form_state);
  // Save the thumbwhere_content and go back to the list of thumbwhere_contents

  // Add in created and changed times.
  if ($thumbwhere_content->is_new = isset($thumbwhere_content->is_new) ? $thumbwhere_content->is_new : 0) {
    $thumbwhere_content->created = time();
  }

  $thumbwhere_content->changed = time();

  $thumbwhere_content->save();
  $form_state['redirect'] = 'admin/content/thumbwhere_contents';
}

/**
 * Form API submit callback for the delete button.
 *
 * @todo Remove hard-coded path
 */
function thumbwhere_content_form_submit_delete(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/content/thumbwhere_contents/thumbwhere_content/' . $form_state['thumbwhere_content']->pk_content . '/delete';
}


/**
 * Form callback: confirmation form for deleting a thumbwhere_content.
 *
 * @param $thumbwhere_content
 *   The thumbwhere_content to delete
 *
 * @see confirm_form()
 */
function thumbwhere_content_delete_form($form, &$form_state, $thumbwhere_content) {
  $form_state['thumbwhere_content'] = $thumbwhere_content;

  $form['#submit'][] = 'thumbwhere_content_delete_form_submit';

  $form = confirm_form($form,
    t('Are you sure you want to delete thumbwhere_content %name?', array('%name' => $thumbwhere_content->title)),
    'admin/content/thumbwhere_contents/thumbwhere_content',
    '<p>' . t('This action cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submit callback for thumbwhere_content_delete_form
 */
function thumbwhere_content_delete_form_submit($form, &$form_state) {
  $thumbwhere_content = $form_state['thumbwhere_content'];

  thumbwhere_content_delete($thumbwhere_content);

  drupal_set_message(t('The thumbwhere_content %name has been deleted.', array('%name' => $thumbwhere_content->title)));
  watchdog('thumbwhere_content', 'Deleted thumbwhere_content %name.', array('%name' => $thumbwhere_content->title));

  $form_state['redirect'] = 'admin/content/thumbwhere_contents';
}



/**
 * Page to add ThumbWhereContent Entities.
 *
 * @todo Pass this through a proper theme function
 */
function thumbwhere_content_add_page() {
  $controller = entity_ui_controller('thumbwhere_content');
  return $controller->addPage();
}


/**
 * Displays the list of available thumbwhere_content types for thumbwhere_content creation.
 *
 * @ingroup themeable
 */
function theme_thumbwhere_content_add_list($variables) {


  //$content = $variables['content'];
  $output = '';
  /*
  if ($content) {
    $output = '<dl class="thumbwhere_content-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    if (user_access('administer thumbwhere_content types')) {
      $output = '<p>' . t('ThumbWhereContent Entities cannot be added because you have not created any thumbwhere_content types yet. Go to the <a href="@create-thumbwhere_content-type">thumbwhere_content type creation page</a> to add a new thumbwhere_content type.', array('@create-thumbwhere_content-type' => url('admin/structure/thumbwhere_content_types/add'))) . '</p>';
    }
    else {
      $output = '<p>' . t('No thumbwhere_content types have been created yet for you to use.') . '</p>';
    }
  }
	*/
  return $output;
}





/**
 * Sets the breadcrumb for administrative thumbwhere_content pages.
 */
function thumbwhere_content_set_breadcrumb() {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Content'), 'admin/content'),
    l(t('ThumbWhereContents'), 'admin/content/thumbwhere_contents'),
  );

  drupal_set_breadcrumb($breadcrumb);
}



