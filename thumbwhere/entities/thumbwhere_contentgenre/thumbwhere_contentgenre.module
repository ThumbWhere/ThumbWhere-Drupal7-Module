<?php

// ******************************************************************
// This file was generated by autogen_model_implementation_drupal.xsl
// ******************************************************************

// Include the ThumbWhere SDK
require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'dependencies' . DIRECTORY_SEPARATOR . 'tw' . DIRECTORY_SEPARATOR . 'sdk.class.php');

/**
 * @file
 * Module for the ThumbWhere ContentGenre Entity
 *
 *
 * NOTE: This has been autogenerated.
 * 
 */

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function thumbwhere_contentgenre_entity_info() {
  $return['thumbwhere_contentgenre'] = array(

    // The human-readable name of the type.
    'label' => t('ThumbWhereContentGenre'),

    // (used by DrupalDefaultEntityController) The name of the entity type's base table.
    'base table' => 'thumbwhere_contentgenre',

    // fieldable: Set to TRUE if you want your entity type to accept fields being attached to it.
    'fieldable' => TRUE,

  // Declare the endty keys..
    'entity keys' => array(
      'id' => 'pk_contentgenre',
      'label' => 'name',
    ),

    // A function taking an entity and an entity type as arguments and returning the label of the entity.
    // The entity label is the main string associated with an entity; for example, the title of a node or
    // the subject of a comment. If there is an entity object property that defines the label, use the
    // 'label' element of the 'entity keys' return value component to provide this information (see below).
    // If more complex logic is needed to determine the label of an entity, you can instead specify a callback
    // function here, which will be called to determine the entity label. See also the entity_label()
    // function, which implements this logic.
    'label callback' => 'entity_class_label',

    // A function taking an entity as argument and returning the uri elements of the entity, e.g. 'path' and 'options'.
    // The actual entity uri can be constructed by passing these elements to url().
    'uri callback' => 'entity_class_uri',

    //
    // Entity API Components
    //

    // The module whwre we can find our classes
    'module' => 'thumbwhere_contentgenre',

    // The entity class and controller class extend the classes provided by the Entity API
    'entity class' => 'ThumbWhereContentGenre',

    // Which Entity API contoller
    'controller class' => 'ThumbWhereContentGenreController',

    // The information below is used by the ThumbWhereContentGenreUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/thumbwhere/thumbwhere_contentgenres',
      'file' => 'thumbwhere_contentgenre.admin.inc',
      'controller class' => 'ThumbWhereContentGenreUIController',
      'menu wildcard' => '%thumbwhere_contentgenre',
    ),
  );

  return $return;
}


/**
 * Implements hook_permission().
 */
function thumbwhere_contentgenre_permission() {

  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer thumbwhere_contentgenres' => array(
      'title' => t('Administer thumbwhere_contentgenres'),
      'description' => t('Edit and delete all thumbwhere_contentgenres'),
    ),
  'send thumbwhere contentgenre notifications' => array(
          'title' => t('Send ThumbWhere Notifications'),
          'description' => t('Allow the caller to call the ThumbWhere ContentGenre Entity Notifications Endpoint.'),
          'restrict access' => TRUE,
      ),    
  );

  return $permissions;
}


/**
 * Determines whether the given user has access to a thumbwhere_contentgenre.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $thumbwhere_contentgenre
 *   Optionally a thumbwhere_contentgenre or a thumbwhere_contentgenre type to check access for. If nothing is
 *   given, access for all thumbwhere_contentgenres is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function thumbwhere_contentgenre_access($op, $thumbwhere_contentgenre = NULL, $account = NULL) {

  //if (user_access('administer thumbwhere_contentgenres', $account)) {
  //  return TRUE;
 // }

  //return FALSE;
  return TRUE;
}




/**
 * Fetch a thumbwhere_contentgenre object. Make sure that the wildcard you choose
 * in the thumbwhere_contentgenre entity definition fits the function name here.
 *
 * @param $thumbwhere_contentgenre_id
 *   Integer specifying the thumbwhere_contentgenre id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $thumbwhere_contentgenre object or FALSE if it cannot be loaded.
 *
 * @see thumbwhere_contentgenre_load_multiple()
 */
function thumbwhere_contentgenre_load($thumbwhere_contentgenre_id, $reset = FALSE) {

  $thumbwhere_contentgenres = entity_load('thumbwhere_contentgenre', array($thumbwhere_contentgenre_id), array(), $reset);

  return reset($thumbwhere_contentgenres);
}


/**
 * Deletes a thumbwhere_contentgenre.
 */
function thumbwhere_contentgenre_delete(ThumbWhereContentGenre $thumbwhere_contentgenre) {

  $thumbwhere_contentgenre->delete();
}

/**
 * Create a thumbwhere_contentgenre object.
 */
function thumbwhere_contentgenre_create($values = array()) {

  return entity_get_controller('thumbwhere_contentgenre')->create($values);
}


/**
 * URI callback for thumbwhere_contentgenres
 */
function thumbwhere_contentgenre_uri(ThumbWhereContentGenre $thumbwhere_contentgenre) {

  return array(
    'path' => 'thumbwhere_contentgenre/' . $thumbwhere_contentgenre->pk_contentgenre,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function thumbwhere_contentgenre_page_title(ThumbWhereContentGenre $thumbwhere_contentgenre) {

	return $thumbwhere_contentgenre->name;
}


/**
 * Sets up content to show an individual thumbwhere_contentgenre
 * @todo - get rid of drupal_set_title();
 */
function thumbwhere_contentgenre_page_view($thumbwhere_contentgenre, $view_mode = 'full') {



  $controller = entity_get_controller('thumbwhere_contentgenre');
  $content = $controller->view(array($thumbwhere_contentgenre->pk_contentgenre => $thumbwhere_contentgenre));
  drupal_set_title($thumbwhere_contentgenre->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function thumbwhere_contentgenre_views_api() {



  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'thumbwhere_contentgenre') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function thumbwhere_contentgenre_theme() {



  return array(
    'thumbwhere_contentgenre_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'thumbwhere_contentgenre.admin.inc',
    ),
    'thumbwhere_contentgenre' => array(
      'render element' => 'elements',
      'template' => 'thumbwhere_contentgenre',
    )
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function thumbwhere_contentgenre_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add action link 'admin/structure/thumbwhere_contentgenres/add' on 'admin/structure/thumbwhere_contentgenres'.
  if ($root_path == 'admin/thumbwhere/thumbwhere_contentgenres') {
    $item = menu_get_item('admin/thumbwhere/thumbwhere_contentgenres/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for thumbwhere_contentgenre entities
 */
class ThumbWhereContentGenre extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'thumbwhere_contentgenre');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'thumbwhere_contentgenre/' . $this->pk_contentgenre);
  }


}



/**
 * The Controller for ThumbWhereContentGenre entities
 */
class ThumbWhereContentGenreController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
}



/**
* Implements hook_entity_presave().
*
* Act on an ContentGenre entity before it is about to be created or updated.
*
* @param $entity
*   The entity object.
* @param $entity_type
*   The type of entity being saved (i.e. node, user, comment).
*/
function thumbwhere_contentgenre_entity_presave($entity, $entity_type) {

  // We only look after what we want...
  if ($entity_type == 'thumbwhere_contentgenre')  {
  	
  	
  	
 	/////////////////////////////////////////////////////
    //
    // Should we not propagate this to ThumbWhere? 
    //
    if (isset($entity->do_not_propagate)) {
      if ($entity->do_not_propagate) {
        if (twCanDebug()) {
          if ($entity->is_new) {
            if (twCanDebug()){
              debug("DO NOT PROPAGATE 'contentgenre' presave *CREATE*");
          	}
          }
          else {
            if (twCanDebug()) {
              debug("DO NOT PROPAGATE 'contentgenre' presave *UPDATE*");
            }
          }
        }

        // To cause an infinite loop of updates, comment out this line.
        return;
      }
      else if (twCanDebug()) {
        debug("OK PROAOGATE 'contentgenre' presave to ThumbWhere Server");
      }
    }
    else if (twCanDebug()) {
      debug("DO NOT PROPAGATE IS NOT SET");
    }
    //
    //
    ////////////////////////////////////////////////////////  	

  
    // .. then we create a new thumbwhere_contentgenre entity...
      // Instantiate the ThumbWhereContent class

    $twContentAPI = new ThumbWhereAPIContent();

    //if (twCanDebug()) debug($twContentAPI);

    //if (twCanDebug()) debug($entity);

    //
    // Collate and validate our fields
    //

    $fields = array();
    // Compulsory so..
    if (empty($entity->name)) {
      throw new Exception('name is mandatory.');
    }
    else {
      $fields['name'] = $entity->name;
    }

    // Nullable so we only pass it through to create_content_genre if we have it..
    if (!empty($entity->external_id)) {
      $fields['external_id'] = $entity->external_id;
    }
		
	//
	// Ensure that we have the 'thumbwhere_api_key' as we are going to pass that through in a context
	//
    if (variable_get('thumbwhere_api_key') == '') {
    	throw new Exception('ThumbWhere resource for \'ContentGenre\' requires that variable \'thumbwhere_api_key\' is set.');
    }
    
              		
    //
    // If this contentgenre entity is new....
    //
               
    if ($entity->is_new) {
                

      //
      // ... then we create the contentgenre entity in ThumbWhere
      //

      $contentgenre = $twContentAPI->create_content_genre($context = array(
                  'key' => variable_get('thumbwhere_api_key')
          ), $fields);
            
       if (twCanDebug()) debug($contentgenre);

      //if (twCanDebug()) debug($content_genre);

      $attributes = $contentgenre->body->content_genre->attributes();

      if (twCanDebug()) debug('newly created id = ' . $attributes['id']);

      // Assign new id.
      $entity->pk_contentgenre = intval($attributes['id']);

      if (twCanDebug()) debug('$entity->pk_contentgenre = ' . $entity->pk_contentgenre);
    }
    else
    {
          	

      //
      // .. otherwise we update the contentgenre entity in ThumbWhere
      //

      $contentgenre = $twContentAPI->update_content_genre($id=$entity->pk_contentgenre,$context = array(
                  'key' => variable_get('thumbwhere_api_key')
          ), $fields);
            
        
    }
          	
    
  }
}

/**
 * Implements thumbwhere_contentgenre_entity_insert().
 *
 * Act on entities when inserted.
 *
 * @param $entity
 *   The entity object
 * @param $type
 *   The type of entity being inserted (i.e. node, user, comment).
 */
function thumbwhere_contentgenre_entity_insert($entity, $type) {

  // Flee if this is not the entity type we are looking for
  if ($type != 'thumbwhere_contentgenre') return;

}


/**
* Implements thumbwhere_contentgenre_entity_delete().
*
* Act on entities when inserted.
*
* @param $entity
*   The entity object
* @param $type
*   The type of entity being deleted (i.e. node, user, comment).
*/
function thumbwhere_contentgenre_entity_delete($entity, $type) {

  // Flee if this is not the entity type we are looking for
  if ($type != 'thumbwhere_contentgenre') return;


}
