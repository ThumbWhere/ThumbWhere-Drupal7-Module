<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 *
 * NOTE: This has been autogenerated.
 */

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_mediaitem
 */
function thumbwhere_mediaitem_uninstall() {

  // Delete the permissions
  foreach (_thumbwhere_mediaitem_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_revoke_permissions($rid, $permissions);
    }
  }


  //
  // Uninstall all the field info
  //

  // Uninstall the Menu TODO: Do we even install a menu???
  if (module_exists('menu')) {
    if ($thumbwhere_mediaitem_menu = menu_load('thumbwhere_mediaitem')) {
      menu_delete($thumbwhere_mediaitem_menu);
    }
  }

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_install().
 *
 * This hook is called when the module is installed.
 *
 * @ingroup thumbwhere_mediaitem
 */
function thumbwhere_mediaitem_install() {

 // Create the permissions
  foreach (_thumbwhere_mediaitem_get_permissions() as $role_name => $permissions) {
    // Find the role ID for this role
    $role = user_role_load_by_name($role_name);
    if ($role != false) {
      $rid = $role->rid;
      // Set the permissions for this role
      user_role_grant_permissions($rid, $permissions);
    }
  }


  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

  // Entity provided by ThumbWhere gets a weight of 12. Storage = 11 and ThumbWere itself, 10
  //db_query("UPDATE {system} SET weight = 12 WHERE name = 'thumbwhere_mediaitem'");

}

/**
 * Implements hook_enable().
 *
 * Called when the module is enabled
 *
 * @ingroup thumbwhere_mediaitem
 */
function thumbwhere_mediaitem_enable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();

}

/**
 * Implements hook_disable().
 *
 * Called when the module is disabled
 *
 * @ingroup thumbwhere_mediaitem
 */
function thumbwhere_mediaitem_disable() {

  // Clear the everything cache
  drupal_flush_all_caches();

  // Rebuild the menu
  menu_rebuild();
}

/**
 * Implements hook_schema().
 *
 *
 * This is where we define the schema for our entity.
 *
 * This results in a table being created called 'thumbwhere_mediaitem'
 *
 * thumbwhere_mediaitem_id
 * The primary key used by
 *
 * pk_mediaitem
 * Used to map to the actual object in ThumbWhere.
 */
function thumbwhere_mediaitem_schema() {
  $t = get_t();

  $schema = array();

  $schema['thumbwhere_mediaitem'] = array(
  'description' => 'The base table for thumbwhere_mediaitem entities.' . 'Contains all the information for a media item. fk_server is the server where this has been uploaded to using the pk_mediaitem as an ID. if censored is true then someone has complained about it and the admins have censored it. if censored is true then someone has complained about it and the admins have reviewed it and deemed it OK. At the moment fk_identity signifies the identity that uploaded the content - this *MAY* be phased out so that fk_identity will be moved into the table \&apos;IdentityMediaItems\&apos; ratingdividend is the total aggregagated actual ratings eg (if a rating is 1 out of 5 then 1 is added to this). ratingdivisor is the total aggergated maximum ratings eg (if a rating is 1 out of 5 then 5 is added to this). Rating is the actual rating = ratingdividend/ratingdivisor ratings is the total number of ratings. TODO: Get rid of fk_identity fk_content is content that has been created out of this mediaitem.',
    'fields' => array(
          'pk_mediaitem' => array(
              'description' => 'ThumbWhere Id: ThumbWhere\'s Primary key this entity. Represents the id of this entity in the ThumbWhere \'ThumbWhereMediaItems\' entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => TRUE,
              'default' => -1,
          ),
          'fk_code' => array(
          'description' => 'ThumbWhere Id: References a \'Code\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_identity' => array(
          'description' => 'ThumbWhere Id: References a \'Identity\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_format' => array(
          'description' => 'ThumbWhere Id: References a \'Format\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_server' => array(
          'description' => 'ThumbWhere Id: References a \'Server\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_license' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'License\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'fk_content' => array(
          'description' => 'ThumbWhere Id: Optional reference to a \'Content\' Entity.',
              'type' => 'int',
              'size' => 'big',
              'not null' => FALSE,
              //'default' => -1,
          ),
          'title' => array(
              'description' => 'The \'title\' textarea field of the \'MediaItem\' entity.',
              'type' => 'text',
              'size' => 'big',
              'not null' => FALSE,                  
          ),
          'body' => array(
              'description' => 'The \'body\' textarea field of the \'MediaItem\' entity.',
              'type' => 'text',
              'size' => 'big',
              'not null' => FALSE,                  
          ),
          'bodyonly' => array(
              'description' => 'The \'bodyonly\' checkbox field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'comment' => array(
              'description' => 'The \'comment\' checkbox field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'usergenerated' => array(
              'description' => 'The \'usergenerated\' checkbox field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'digest' => array(
              'description' => 'The \'digest\' textfield field of the \'MediaItem\' entity.',
              'type' => 'varchar',
              'size' => 'normal',
              'length' => 128,
              'not null' => FALSE,                  
          ),
          'process_attempts' => array(
              'description' => 'The \'process_attempts\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'censored' => array(
              'description' => 'The \'censored\' checkbox field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'reviewed' => array(
              'description' => 'The \'reviewed\' checkbox field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'privacy' => array(
              'description' => 'The \'privacy\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'viewcount' => array(
              'description' => 'The \'viewcount\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'ratingdividend' => array(
              'description' => 'The \'ratingdividend\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'ratingdivisor' => array(
              'description' => 'The \'ratingdivisor\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),
          'ratings' => array(
              'description' => 'The \'ratings\' textfield field of the \'MediaItem\' entity.',
              'type' => 'int',
              'size' => 'normal',
              'not null' => FALSE,
              'default' => '0',                  
          ),      
      ),
      'primary key' => array(
          'pk_mediaitem'      
      ),      
      'indexes' => array(
          'pk_mediaitem' => array(
              'pk_mediaitem'
          ),
          'fk_code' => array(
              'fk_code'
          ),
          'fk_identity' => array(
              'fk_identity'
          ),
          'fk_format' => array(
              'fk_format'
          ),
          'fk_server' => array(
              'fk_server'
          ),
          'fk_license' => array(
              'fk_license'
          ),
          'fk_content' => array(
              'fk_content'
          ),
      
      ),
  );

  return $schema;
}


/**
 * Returns a structured array defining the permission for each role.
 *
 * @return
 *  An associative array specifying the permissions for each role
 *
 * @ingroup track
 */
function _thumbwhere_mediaitem_get_permissions() {
  return array(
      'anonymous user' => array(
          'send thumbwhere mediaitem notifications',
      ),
      'authenticated user' => array(
          'send thumbwhere mediaitem notifications',
      ),      
      'administrator' => array(
          'send thumbwhere mediaitem notifications',
      ),
  );
}


