<?php

/**
 * @file
 * ThumbWhereMetadata editing UI.
 *
 * We make very little use of the EntityAPI interface for this - preferring instead to use
 * views. That offers more flexibility to change a UI that will, more often than not,
 * be end-user facing.
 *
 * NOTE: This file was generated by autogen_model_implementation_drupal.xsl
 */


	

 
/**
 * Handle the notification for content_ingext
 */
function _thumbwhere_handle_metadata_notify_xml($notification) {

  //
  // Get the operation
  //

  if (!isset($notification->attributes()->op)) {
    drupal_add_http_header('Status', '501 unable to fulfull request..');
    $err = 'We were expecting an \'op\', attribute on the \'metadata\', element.';
    print($err);
   	watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
    exit(0);
  }

  $op = $notification->attributes()->op;

  if (twCanDebug()) debug('op');
  if (twCanDebug()) debug($op);

  //
  // Get the context
  //

  if (!isset($notification->attributes()->key)) {
    drupal_add_http_header('Status', '412 unable to fulfull request..');
    $err = 'We were expecting a \'key\', attribute on the \'metadata\', element.';
    print($err);
    watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
    exit(0);
  }

  $context_key =  $notification->attributes()->key;

  //
  // Now based on the operation..
  //

  switch($op)
  {
  
  
      case 'create':
      {
      
        //
        // What resource are we creating?
        //
      
        //
        // Get the id
        //
		
        if (!isset($notification->attributes()->id)) {
          drupal_add_http_header('Status', '412 Unable to fulfull request.');
          $err = 'We were expecting an \'id\', attribute on the \'metadata\', element when we are performing an \'update\' notification..';
          print($err);
          watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
          exit(0);
        }

        $id = intval($notification->attributes()->id);
		

        if (twCanDebug()) debug('id');
        if (twCanDebug()) debug($id);

      
        //
        // Get the fields
        //
          
        $entities = entity_load('thumbwhere_metadata', array($id));

        if (twCanDebug()) debug('$entities');
        if (twCanDebug()) debug($entities);

        if (count($entities) != 0) {
          //drupal_add_http_header('Status', '409 Resource already exists.');
          $err = '\'metadata\' resource already exists with an id of \'' . $id . '\'.';
           //print($err);
          watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
          //exit(0);

          	
          drupal_add_http_header('Content-Type', 'text/xml');
          print('<response>');
          print('<metadata op="' . $op . '" id="' . $id . '" >');
          print('<status>success</status>');
          print('</metadata>');
          print('</response>');
          exit(0);          	
          
        }

        // Getting a reference to the entity we asked for
        $entityfields = array();

        //
        // We are only updating what has been passed through.
        // No test for missing values.
        // TODO: Validate incoming values.
        //


        $entityfields['pk_metadata'] = $id;	

        if (isset($notification->trackmetadata)) {
          $entityfields['fk_trackmetadata'] = intval($notification->trackmetadata);
        }

        if (!isset($notification->attributes()->key)) {
          if (twCanDebug()) debug('$entities');
          if (twCanDebug()) debug($entities);
        }

        // We are being notified, so we do not want to ship this out again as a notification...
        // Finally write the entity.
        $entity = entity_create('thumbwhere_metadata', $entityfields);
        $entity->do_not_propagate = TRUE;
        $entity->save();

        //
        // Send the final response
        //

        drupal_add_http_header('Content-Type', 'text/xml');
        print('<response>');
        print('<metadata op="' . $op . '" id="' . $id . '" >');
        print('<status>success</status>');
        print('</metadata>');
        print('</response>');
        exit(0);			
		
      
      }
  
  
    case 'update':
      {
        //
        // What resource are we updating?
        //
      
        //
        // Get the id
        //
		
        if (!isset($notification->attributes()->id)) {
          drupal_add_http_header('Status', '412 Unable to fulfull request.');
          $err = 'We were expecting an \'id\', attribute on the \'metadata\', element when we are performing an \'update\' notification..';
          print($err);
          watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
          exit(0);
        }

        $id = intval($notification->attributes()->id);
		

        if (twCanDebug()) debug('id');
        if (twCanDebug()) debug($id);

      
        //
        // Get the fields
        //
          
        $entities = entity_load('thumbwhere_metadata', array($id));

        if (twCanDebug()) debug('$entities');
        if (twCanDebug()) debug($entities);

        if (count($entities) == 0) {
          //drupal_add_http_header('Status', '409 No such resource exists.');
          $err = 'No such \'metadata\' resource exists with an id of \'' . $id . '\'.';
          //print($err);
          watchdog('thumbwhere_metadata',$err,array(), WATCHDOG_ERROR);
          //exit(0);

////////////////////////////////////////////////////////////////////////
//
// ... for now we will just create the local copy
//
          watchdog('thumbwhere_metadata','creating local version of missing entity',array(), WATCHDOG_ERROR);

        //
        // What resource are we creating?
        //
      
        //
        // Get the id
        //
		
        if (!isset($notification->attributes()->id)) {
          drupal_add_http_header('Status', '412 Unable to fulfull request.');
          $err = 'We were expecting an \'id\', attribute on the \'metadata\', element when we are performing an \'update\' notification..';
          print($err);
          watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
          exit(0);
        }

        $id = intval($notification->attributes()->id);
		

        if (twCanDebug()) debug('id');
        if (twCanDebug()) debug($id);

      
        //
        // Get the fields
        //
          
        $entities = entity_load('thumbwhere_metadata', array($id));

        if (twCanDebug()) debug('$entities');
        if (twCanDebug()) debug($entities);

        if (count($entities) != 0) {
          //drupal_add_http_header('Status', '409 Resource already exists.');
          $err = '\'metadata\' resource already exists with an id of \'' . $id . '\'.';
           //print($err);
          watchdog('thumbwhere_metadata', $err ,array(), WATCHDOG_ERROR);
          //exit(0);

          	
          drupal_add_http_header('Content-Type', 'text/xml');
          print('<response>');
          print('<metadata op="' . $op . '" id="' . $id . '" >');
          print('<status>success</status>');
          print('</metadata>');
          print('</response>');
          exit(0);          	
          
        }

        // Getting a reference to the entity we asked for
        $entityfields = array();

        //
        // We are only updating what has been passed through.
        // No test for missing values.
        // TODO: Validate incoming values.
        //


        $entityfields['pk_metadata'] = $id;	

        if (isset($notification->trackmetadata)) {
          $entityfields['fk_trackmetadata'] = intval($notification->trackmetadata);
        }

        if (!isset($notification->attributes()->key)) {
          if (twCanDebug()) debug('$entities');
          if (twCanDebug()) debug($entities);
        }

        // We are being notified, so we do not want to ship this out again as a notification...
        // Finally write the entity.
        $entity = entity_create('thumbwhere_metadata', $entityfields);
        $entity->do_not_propagate = TRUE;
        $entity->save();

        //
        // Send the final response
        //

        drupal_add_http_header('Content-Type', 'text/xml');
        print('<response>');
        print('<metadata op="' . $op . '" id="' . $id . '" >');
        print('<status>success</status>');
        print('</metadata>');
        print('</response>');
        exit(0);			
		
//
//
//
////////////////////////////////////////////////////////////////////////
        }

        // Getting a reference to the entity we asked for
        $entity = $entities[$id];

        //
        // We are only updating what has been passed through.
        // No test for missing values.
        // TODO: Validate incoming values.
        //


        if (isset($notification->trackmetadata)) {
          $entity->fk_trackmetadata = intval($notification->trackmetadata);
        }

        if (!isset($notification->attributes()->key)) {
          if (twCanDebug()) debug('$entities');
          if (twCanDebug()) debug($entities);
        }

        // We are being notified, so we do not want to ship this out again as a notification...
        $entity->do_not_propagate = TRUE;

        // Finally write the entity.
        entity_save('thumbwhere_metadata', $entity);

        //
        // Send the final response
        //

        drupal_add_http_header('Content-Type', 'text/xml');
        print('<response>');
        print('<metadata op="' . $op . '" id="' . $id . '" >');
        print('<status>success</status>');
        print('</metadata>');
        print('</response>');
        exit(0);
      }
      
      

    default:
      {
        drupal_add_http_header('Status', '501 Unable to fulfull request..');
        print('We don\'t handle the \'' . $op . '\', notification operation on the \'metadata\', element.');
        exit(0);

      }
  }
}



/**
 * Menu callback: React to a notifications for ContentIngest.
 */
function _thumbwhere_metadata_notify() {

  if (variable_get('thumbwhere_api_log_debug', 0) == 1) {
    watchdog('thumbwhere_metadata', 'incoming notification.');
  }

  $numargs = func_num_args();
  $arg_list = func_get_args();

  
	if (twCanDebug()) debug('$numargs  = ' . $numargs);
	
	if (twCanDebug()) debug('$arg_list = ' . $arg_list);
	
	if (twCanDebug()) debug('$_REQUEST');
	if (twCanDebug()) debug($_REQUEST);
	
	if (twCanDebug()) debug('$_GET');
	if (twCanDebug()) debug($_GET);
	
	if (twCanDebug()) debug('$_POST');
	if (twCanDebug()) debug($_POST);
	
	//if (twCanDebug()) debug('$HTTP_RAW_POST_DATA');
	//if (twCanDebug()) debug($HTTP_RAW_POST_DATA);
	
	if (twCanDebug()) debug('$_SERVER');
	if (twCanDebug()) debug($_SERVER);
	
	//if (twCanDebug()) debug('$GLOBALS');
	//if (twCanDebug()) debug($GLOBALS);

  

  if (variable_get('thumbwhere_api_log_debug', 0) == 1) {
    foreach ($arg_list as $arg) {
      if (twCanDebug()) debug('$arg  = ' . $arg);
    }
  }


  //////////////////////////////////////////////////
  //
  //

  switch ($_SERVER['REQUEST_METHOD']) {

    case 'POST': {
        if ($numargs == 1) {
          if ($arg_list[0] == 'metadata') {

            //
            // Get the POST data as XML
            //

            $post_xml = new SimpleXMLElement('php://input', null, true);
            if (twCanDebug()) debug('$post_xml');
            if (twCanDebug()) debug($post_xml);

            if (twCanDebug()) debug('$post_xml->getName()');
            if (twCanDebug()) debug($post_xml->getName());

            // We expect 'action' as the root element. TODO: I would rather this was the more generic 'request'
            if ($post_xml->getName() != 'action') {
              drupal_add_http_header('Status', '404 not found.');
              print('We were expecting \'action\', as the root element, not \'' . $post_xml->getName() . '\'.');
              exit(0);
            }

            /*
             *  SimpleXMLElement::__set_state(array(
             *      'metadata' =>
             *      SimpleXMLElement::__set_state(array(
             *       '@attributes' =>
             *      array (
             *        'key' => '8e9ff318-3cd7-4593-99de-4c37c0fb335a',
             *        'op' => 'create',
             *      ),
             *    )),
             *  ))
             */


            // We expect 'action' as the root element.
            if (!isset($post_xml->metadata)) {
              drupal_add_http_header('Status', '404 not found.');
              print('We were expecting a \'metadata\', element in the action payload.');
              exit(0);
            }

            // Handle the incoming notification for content ingest
            _thumbwhere_handle_metadata_notify_xml($post_xml->metadata);

          }
          else {
            drupal_add_http_header('Status', '404 not found.');
            print('Invalid resource');
            exit(0);
          }
        }
        else {
          drupal_add_http_header('Status', '404 not found.');
          print('Invalid notification request url format.');
          exit(0);
        }
      }
      break;

    case 'GET': {

        if ($numargs == 1) {

          // If we are returning the index.xml file for the webservice.
          if ($arg_list[0] == 'index.xml') {
            // return index.xml
            drupal_add_http_header('Content-Type', 'text/xml');
            readfile(dirname(__FILE__) . '/index.xml');
            exit(0);
          }
          else {
            drupal_add_http_header('Status', '404 not found.');
            print('File not found.');
            exit(0);
          }
        }
        else {
          drupal_add_http_header('Status', '404 not found.');
          print('Invalid notification request url format.');
          exit(0);
        }
      }
      break;

    default: {
        drupal_add_http_header('Status', '404 not found.');
        exit(0);
      }
      break;
  }

  //
  //
  ////////////////////////////////////////////////////////////////////////////////////
 
}





/**
 * Metadata UI controller.
 */
class ThumbWhereMetadataUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults. Main reason for doing this is that
   * parent class hook_menu() is optimized for entity type administration.
   */
  public function hook_menu() {

    $items = array();
    
    // Add a notification page...
    $items['thumbwhere/metadata/notify'] = array(
        'title' => 'Notifications Callback for "Metadata" Entity',
        'page callback' => '_thumbwhere_metadata_notify',
        'access arguments' => array(
            'send thumbwhere metadata notifications'
        ),
        'file' => 'thumbwhere_metadata.admin.inc',
        'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );    
    
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%' . $this->entityType;

    $items[$this->path] = array(
      'title' => 'Metadata',
      'description' => 'Add edit and update thumbwhere_metadatas.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    );

    // Change the overview menu type for the list of thumbwhere_metadatas.
    $items[$this->path]['type'] = MENU_LOCAL_TASK;

    // Change the add page menu to multiple types of entities
    $items[$this->path . '/add'] = array(
      //'title' => 'Add a Metadata',
      'title' => 'Add',
	  'description' => 'Add a new Metadata',
      'page callback'  => 'thumbwhere_metadata_add_page',
      'access callback'  => 'thumbwhere_metadata_access',
      'access arguments' => array('edit'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 20,
      'file' => 'thumbwhere_metadata.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])

    );
/*
    $items[$this->path . '/add/' . 'thumbwhere_metadata'] = array(
      'title' => 'Add ' . 'ThumbWhereMetadata',
      'page callback' => 'thumbwhere_metadata_form_wrapper',
      'page arguments' => array(thumbwhere_metadata_create(array('type' => 'thumbwhere_metadata'))),
      'access callback' => 'thumbwhere_metadata_access',
      'access arguments' => array('edit', 'edit ' . 'thumbwhere_metadata'),
      'file' => 'thumbwhere_metadata.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
*/
    // Loading and editing thumbwhere_metadata entities
    $items[$this->path . '/thumbwhere_metadata/' . $wildcard] = array(
      'page callback' => 'thumbwhere_metadata_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'thumbwhere_metadata_access',
      'access arguments' => array('edit', $id_count + 1),
      'weight' => 0,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'thumbwhere_metadata.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
    $items[$this->path . '/thumbwhere_metadata/' . $wildcard . '/edit'] = array(
      'title' => 'Edit',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $items[$this->path . '/thumbwhere_metadata/' . $wildcard . '/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'thumbwhere_metadata_delete_form_wrapper',
      'page arguments' => array($id_count + 1),
      'access callback' => 'thumbwhere_metadata_access',
      'access arguments' => array('edit', $id_count + 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 10,
      'file' => 'thumbwhere_metadata.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );

    // Menu item for viewing thumbwhere_metadatas
    $items['thumbwhere_metadata/' . $wildcard] = array(
      //'title' => 'Title',
      'title callback' => 'thumbwhere_metadata_page_title',
      'title arguments' => array(1),
      'page callback' => 'thumbwhere_metadata_page_view',
      'page arguments' => array(1),
      'access callback' => 'thumbwhere_metadata_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
    );
    return $items;
  }


  /**
   * Create the markup for the add ThumbWhereMetadata Entities page within the class
   * so it can easily be extended/overriden.
   */
  public function addPage() {
    $item = menu_get_item();
    $content = system_admin_menu_block($item);

    if (count($content) == 1) {
      $item = array_shift($content);
      drupal_goto($item['href']);
    }

    return theme('thumbwhere_metadata_add_list', array('content' => $content));
  }

}


/**
 * Form callback wrapper: create or edit a thumbwhere_metadata.
 *
 * @param $thumbwhere_metadata
 *   The thumbwhere_metadata object being edited by this form.
 *
 * @see thumbwhere_metadata_edit_form()
 */
function thumbwhere_metadata_form_wrapper($thumbwhere_metadata) {
  // Add the breadcrumb for the form's location.
  thumbwhere_metadata_set_breadcrumb();
  return drupal_get_form('thumbwhere_metadata_edit_form', $thumbwhere_metadata);
}


/**
 * Form callback wrapper: delete a thumbwhere_metadata.
 *
 * @param $thumbwhere_metadata
 *   The thumbwhere_metadata object being edited by this form.
 *
 * @see thumbwhere_metadata_edit_form()
 */
function thumbwhere_metadata_delete_form_wrapper($thumbwhere_metadata) {
  // Add the breadcrumb for the form's location.
  //thumbwhere_metadata_set_breadcrumb();
  return drupal_get_form('thumbwhere_metadata_delete_form', $thumbwhere_metadata);
}


/**
 * Form callback: create or edit a thumbwhere_metadata.
 *
 * @param $thumbwhere_metadata
 *   The thumbwhere_metadata object to edit or for a create form an empty thumbwhere_metadata object
 *     with only a thumbwhere_metadata type defined.
 */
function thumbwhere_metadata_edit_form($form, &$form_state, $thumbwhere_metadata) {

  // Add the default field elements.
  $form['fk_trackmetadata'] = array(
    '#type' => 'textfield',
    '#title' => t('ThumbWhereMetadata fk_trackmetadata'),
    '#default_value' => isset($thumbwhere_metadata->fk_trackmetadata) ? $thumbwhere_metadata->fk_trackmetadata : '',
    //'#maxlength' => 255,
   /// '#required' => TRUE,
    '#weight' => -5,
    '#autocomplete_path' => 'entity-autocomplete/thumbwhere_trackmetadata',
  );



  $form['data']['#tree'] = TRUE;

  /*
  $form['data']['sample_data'] = array(
    '#type' => 'checkbox',
    '#title' => t('An interesting thumbwhere_metadata switch'),
    '#default_value' => isset($thumbwhere_metadata->data['sample_data']) ? $thumbwhere_metadata->data['sample_data'] : 1,
  );
  */


  // Add the field related form elements.
  $form_state['thumbwhere_metadata'] = $thumbwhere_metadata;
  field_attach_form('thumbwhere_metadata', $thumbwhere_metadata, $form, $form_state);

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save thumbwhere_metadata'),
    '#submit' => $submit + array('thumbwhere_metadata_edit_form_submit'),
  );

  // Do we show the delete button?
  if (!empty($thumbwhere_metadata->pk_metadata)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete thumbwhere_metadata'),
      '#suffix' => l(t('Cancel'), 'admin/thumbwhere/thumbwhere_metadatas'),
      '#submit' => $submit + array('thumbwhere_metadata_form_submit_delete'),
      '#weight' => 45,
    );
  }

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'thumbwhere_metadata_edit_form_validate';
  return $form;
}


/**
 * Form API validate callback for the thumbwhere_metadata form
 */
function thumbwhere_metadata_edit_form_validate(&$form, &$form_state) {
   
  //if (twCanDebug()) debug($form);   
  //if (twCanDebug()) debug($form_state);


  // No validation for pk


  // Convert fk autocomplete for fk_trackmetadata
  $value = $form['fk_trackmetadata']['#value'];
  // If we have something, escape the auto-completion encoding.
  if (!empty($value)) { 
    $value = entity_autocomplete_get_id($value);
    form_set_value($form['fk_trackmetadata'], $value,$form_state);
  }
  //if (twCanDebug()) debug($form['fk_trackmetadata']);
   if (twCanDebug()) debug('fk_trackmetadata = ' . $value);
  // Validate fk fk_trackmetadata


              

  //form_set_value( array('#parents' => array('array_key_parent', 'array_key_to_replace')) , $value, $form_state);

   
   
  $thumbwhere_metadata = $form_state['thumbwhere_metadata'];

  // Notify field widgets to validate their data.
  field_attach_form_validate('thumbwhere_metadata', $thumbwhere_metadata, $form, $form_state);
    
    
  
}


/**
 * Form API submit callback for the thumbwhere_metadata form.
 *
 * @todo remove hard-coded link
 */
function thumbwhere_metadata_edit_form_submit(&$form, &$form_state) {

  $thumbwhere_metadata = entity_ui_controller('thumbwhere_metadata')->entityFormSubmitBuildEntity($form, $form_state);
  // Save the thumbwhere_metadata and go back to the list of thumbwhere_metadatas

  // Add in created and changed times.
  if ($thumbwhere_metadata->is_new = isset($thumbwhere_metadata->is_new) ? $thumbwhere_metadata->is_new : 0) {
    $thumbwhere_metadata->created = time();
  }

  $thumbwhere_metadata->changed = time();

  $thumbwhere_metadata->save();
  $form_state['redirect'] = 'admin/thumbwhere/thumbwhere_metadatas';
}

/**
 * Form API submit callback for the delete button.
 *
 * @todo Remove hard-coded path
 */
function thumbwhere_metadata_form_submit_delete(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/thumbwhere/thumbwhere_metadatas/thumbwhere_metadata/' . $form_state['thumbwhere_metadata']->pk_metadata . '/delete';
}





/**
 * Form callback: confirmation form for deleting a thumbwhere_metadata.
 *
 * @param $thumbwhere_metadata
 *   The thumbwhere_metadata to delete
 *
 * @see confirm_form()
 */
function thumbwhere_metadata_delete_form($form, &$form_state, $thumbwhere_metadata) {
  $form_state['thumbwhere_metadata'] = $thumbwhere_metadata;

  $form['#submit'][] = 'thumbwhere_metadata_delete_form_submit';

  $form = confirm_form($form,
    t('Are you sure you want to delete thumbwhere_metadata %name?', array('%name' => $thumbwhere_metadata->pk_metadata)),
    'admin/thumbwhere/thumbwhere_metadatas/thumbwhere_metadata',
    '<p>' . t('This action cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submit callback for thumbwhere_metadata_delete_form
 */
function thumbwhere_metadata_delete_form_submit($form, &$form_state) {
  $thumbwhere_metadata = $form_state['thumbwhere_metadata'];

  thumbwhere_metadata_delete($thumbwhere_metadata);

  drupal_set_message(t('The thumbwhere_metadata %name has been deleted.', array('%name' => $thumbwhere_metadata->pk_metadata)));
  watchdog('thumbwhere_metadata', 'Deleted thumbwhere_metadata %name.', array('%name' => $thumbwhere_metadata->pk_metadata));

  $form_state['redirect'] = 'admin/thumbwhere/thumbwhere_metadatas';
}



/**
 * Page to add ThumbWhereMetadata Entities.
 *
 * @todo Pass this through a proper theme function
 */
function thumbwhere_metadata_add_page() {
  $controller = entity_ui_controller('thumbwhere_metadata');
  return $controller->addPage();
}


/**
 * Displays the list of available thumbwhere_metadata types for thumbwhere_metadata creation.
 *
 * @ingroup themeable
 */
function theme_thumbwhere_metadata_add_list($variables) {


  //$content = $variables['content'];
  $output = '';
  /*
  if ($content) {
    $output = '<dl class="thumbwhere_metadata-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    if (user_access('administer thumbwhere_metadata types')) {
      $output = '<p>' . t('ThumbWhereMetadata Entities cannot be added because you have not created any thumbwhere_metadata types yet. Go to the <a href="@create-thumbwhere_metadata-type">thumbwhere_metadata type creation page</a> to add a new thumbwhere_metadata type.', array('@create-thumbwhere_metadata-type' => url('admin/structure/thumbwhere_metadata_types/add'))) . '</p>';
    }
    else {
      $output = '<p>' . t('No thumbwhere_metadata types have been created yet for you to use.') . '</p>';
    }
  }
  */
  return $output;
}





/**
 * Sets the breadcrumb for administrative thumbwhere_metadata pages.
 */
function thumbwhere_metadata_set_breadcrumb() {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Metadata'), 'admin/content'),
    l(t('Metadata'), 'admin/thumbwhere/thumbwhere_metadatas'),
  );

  drupal_set_breadcrumb($breadcrumb);
}



