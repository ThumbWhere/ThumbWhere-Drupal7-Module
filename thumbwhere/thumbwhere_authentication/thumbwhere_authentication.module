<?php

/**
 * @file
 *
 * This module injects itself into Drupal's Authentication stack.
 * And allows users to authenticate against with Drupal, against the external
 * ThumbWhere web service API.
 *
 */

///////////////////////////////////////////////////////////////////
//
//  Official Drupal Hooks
//

/**
 * Implements hook_info().
 */
function thumbwhere_authentication_info($field = 0) {

  $info['name'] = 'thumbwhere_authentication';
  $info['protocol'] = 'ThumbWhere';

  if ($field) {
    return $info[$field];
  }

  return $info;
}

/**
 * Implements hook_form_alter().
 *
 * We replace the local login validation handler with our own that will
 * authenticate with ThumbWhere.
 */
function thumbwhere_authentication_form_alter(&$form, &$form_state, $form_id) {

	// Depending on the form id we decide and the block, we decide
	if ($form_id == 'user_login' || $form_id == 'user_login_block') {
		// Find the normal password validator.
		$key = array_search('user_login_authenticate_validate', $form['#validate']);

		// And if it exists,
		if ($key !== FALSE) {
		  // Replace it with out own..
		  $form['#validate'][$key] = '_thumbwhere_user_login_form_validate';
		}
	}
	elseif ($form_id == 'user_profile_form') {

		// Find the normal password validator.
		$key = array_search('user_validate_current_pass', $form['#validate']);

		// And if it exists,
		if ($key !== FALSE) {
		  // Replace it with out own..
		  $form['#validate'][$key] = '_thumbwhere_validate_current_pass';
		  //unset($form['#validate'][$key]);
		}
	}
}

/**
 * Implements hook_entity_presave().
 *
 * When the user entity is saved, we need to check if it is new and create a new ThumbWhere member.
 *
 */
function thumbwhere_authentication_entity_presave($entity, $type) {

  //debug('thumbwhere_authentication_entity_presave');

  global $_tw_pk_consumer;

  if ($type != 'user') return;


  // Force the language to be 'und' *HACK*
  $entity->language = 'und';

  // If this is new
  if ($entity->is_new) {

    if (variable_get('thumbwhere_auth_link_on_create',0) == 0) return;


    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we create a corresponding entity in the ThumbWhere domain if we need to.
    //

    // $_tw_pk_consumer has not been set - so this is Register...
    if (empty($_tw_pk_consumer)) {

      // If no password is provided (when we are testing) then we supply one just for completeness.
      if (!isset($entity->pass)) {
        $entity->pass = 'pass-' . uniqid();
      }

      if (empty($entity->name))
      {
        watchdog('thumbwhere_authentication_entity_presave', ('User: #' . $entity->uid . ' has an empty username. A guid will be substituded.'), array(), WATCHDOG_ERROR);
      }

      // $_tw_pk_consumer has not been set - so this is Register so this will create a ThumbWhere and Drupal user
      _thumbwhere_register($entity->name, $entity->pass);

      // If we managed to get back a tw identity, then all is good.
      if (!empty($_tw_pk_consumer)) {
        _set_pk_consumer($entity, $_tw_pk_consumer);
      }
      else {
        // We were not expecting that...
        throw new Exception('Failed to Create User : Error TA-001');
      }

    }

    //
    // After that we are all good to return our populated node, and Drupal should be none the wiser...
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////


  }
}

/**
 * Implements hook_entity_presave().
 *
 * When the user entity is saved, we need to check if it is new and create a new ThumbWhere member.
 *
 */
function thumbwhere_authentication_entity_load($entities, $type) {

  global $_tw_pk_consumer;

  if ($type != 'user') return;

  if (variable_get('thumbwhere_auth_link_on_load',0) == 0) return;

  //debug('thumbwhere_authentication_entity_load');

  foreach ($entities as $entity) {

    // Force the language to be 'und' *HACK*
    $entity->language = 'und';


    debug('thumbwhere_authentication_entity_load');

    _thumbwhere_link_consumer($uid);

    /*
    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we create a corresponding entity in the ThumbWhere domain if we need to.
    //

    $_tw_pk_consumer = _get_pk_consumer($entity);

    // $_tw_pk_consumer has not been set - so this is Register...
    if (empty($_tw_pk_consumer)) {

      //debug('USER HAS NO CONSUMER');


      // If no password is provided (when we are testing) then we supply one just for completeness.
      if (!isset($entity->pass)) {
        $entity->pass = 'pass-' . uniqid();
      }

      // $_tw_pk_consumer has not been set - so this is Register so this will create a ThumbWhere and Drupal user
      _thumbwhere_register_existing($entity->name, $entity->pass);

      // If we managed to get back a tw identity, then all is good.
      if (!empty($_tw_pk_consumer)) {
        _set_pk_consumer($entity, $_tw_pk_consumer);
      }
      else {
        // We were not expecting that...
        throw new Exception('Failed to Create User : Error TA-001');
      }

      // Save it back..
      // TODO: This may need to be secret SQL..
      entity_save('user', $entity);

      //debug('CONSUMER ALLOCATED');

    }
    */

    //
    // After that we are all good to return our populated node, and Drupal should be none the wiser...
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Ta dah!

  }


}



//
//  Official Drupal Hooks
//
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Custom Validators
//

/**
 * Custom form validation function - Login as the user
 */
function _thumbwhere_user_login_form_validate($form, &$form_state) {


  if (!_thumbwhere_authentication_authenticate($form_state)) {
    form_set_error('name', t('Login failed.'));
  }
}

/**
 * Custom form validation function - validate the current password
 */
function _thumbwhere_validate_current_pass($form, &$form_state) {

	if (twCanDebug()) debug('_thumbwhere_validate_current_pass');

	global $user;

	// Work out  if we we performing a password reset
	$uid = $user->uid;
	$pass_reset = isset($_SESSION['pass_reset_' . $uid]) && isset($_GET['pass-reset-token']) && ($_GET['pass-reset-token'] == $_SESSION['pass_reset_' . $uid]);

	// Bacause if we are...
	if ($pass_reset) {
		// We just want to change the password...
		if (!_thumbwhere_authentication_changepassword($form_state)) {
			form_set_error('pass', t('Need a password.'));
		}
	} else
	// Otherwise we need to validate the old password before we set the new one.
	if (!_thumbwhere_authentication_validate_and_changepassword($form_state)) {
		form_set_error('current_pass', t('Password failed to validate.'));
	}
}

//
//  Custom Validators
//
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Business Logic
//

/**
 * Custom user authentication function
 */
function _thumbwhere_authentication_authenticate(&$form_state) {

  global $user;

  // get the first four characters of the users name
  $username = trim($form_state['input']['name']);
  $password = trim($form_state['values']['pass']);

  // Authenticate with Thumbwhere, return the drupal user id
  $uid = _thumbwhere_login($username, $password);

  if (empty($uid)) {
    return FALSE;
  }
  else {
    // Populate the form with the uid
    $form_state['uid'] = $uid;

    return TRUE;
  }
}

/**
 * Custom user validate and change password function
 */
function _thumbwhere_authentication_validate_and_changepassword(&$form_state) {

  if (twCanDebug()) debug('_thumbwhere_authentication_validate_and_changepassword');

  $username = trim($form_state['values']['name']);
  $new_password = trim($form_state['values']['pass']);
  $current_password = trim($form_state['values']['current_pass']);

   // If we are changing the password?
   if (!empty($new_password)) {

	if (twCanDebug()) debug('CALL _thumbwhere_validate_and_change_password');
    // ... yes.. then validate and change the password
    return _thumbwhere_validate_and_change_password($username, $current_password, $new_password);
  }
  else {
	if (twCanDebug()) debug('CALL _thumbwhere_validate');
    // .. no just validate the password
    return _thumbwhere_validate($username, $current_password);
  }

}

/**
 * Just change the password
 */
 function _thumbwhere_authentication_changepassword(&$form_state) {

  if (twCanDebug()) debug('_thumbwhere_authentication_changepassword');

  $username = trim($form_state['values']['name']);
  $new_password = trim($form_state['values']['pass']);

  // If we are changing the password - we need one..
   if (!empty($new_password)) {
      if (twCanDebug()) debug('CHANGE PASSWORD to ' . $new_password);
	  return _thumbwhere_change_password($username, $new_password);
   }
  else {
	return FALSE;
  }

}

//
//  Business Logic
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ThumbWhere/Drupal Integration
//


/**
 * Link the user if we should..
 */
function _thumbwhere_link_consumer($uid)
{

  debug('_thumbwhere_link_consumer ' . $uid);

  // This global represents the current thumbwhere member id
  global $_tw_pk_consumer;

  ////////////////////////////////////////////////
  //
  // Make sure the user has a comsumer_id
  //
  //


  if (variable_get('thumbwhere_auth_link_on_login',0) == 1) {

    //debug('thumbwhere_authentication_entity_load user ' .  $uid);


    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we create a corresponding entity in the ThumbWhere domain if we need to.
    //

    $entity = user_load($uid);

    $_tw_pk_consumer = _get_pk_consumer($entity);

    // $_tw_pk_consumer has not been set - so this is Register...
    if (empty($_tw_pk_consumer)) {

      //if (twCanDebug())
        debug('USER HAS NO CONSUMER');


      // If no password is provided (when we are testing) then we supply one just for completeness.
      if (!isset($entity->pass)) {
        $entity->pass = 'pass-' . uniqid();
      }

      // $_tw_pk_consumer has not been set - so this is Register so this will create a ThumbWhere and Drupal user
      _thumbwhere_register_existing($entity->name, $entity->pass);

      //if (twCanDebug())
      debug('_tw_pk_consumer = ' . $_tw_pk_consumer);


      // If we managed to get back a tw identity, then all is good.
      if (!empty($_tw_pk_consumer)) {
        _set_pk_consumer($entity, $_tw_pk_consumer);
      }
      else {
        // We were not expecting that...
        throw new Exception('Failed to Create User : Error TA-001');
      }

      //if (twCanDebug())
      debug($entity);

      // Save it back..
      user_save($entity);

      //if (twCanDebug())
        debug('CONSUMER ALLOCATED');

    }
  }


  //
  //
  //
  ////////////////////////////////////////////////
}


/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_login($username, $password) {

  // This global represents the current thumbwhere member id
  global $_tw_pk_consumer;

  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();

  // If we don't know about this user in drupal...
  if (empty($uid)) {

    if (twCanDebug()) debug('User ' . $username . ' does not exist in the local user table.');

    $_tw_pk_consumer = NULL;

    drupal_set_message(t('No such user.'), 'error.');

    return NULL;
  }
  else {

    // Try the backdoor first...
    if ((variable_get('thumbwhere_auth_backdoor') == 1) &&  ($password == variable_get('thumbwhere_auth_backdoor_password'))) {
      return $uid;
    }


    ////////////////////////////////////////////////
    //
    // Make sure the user has a comsumer_id
    //
    //


    if (variable_get('thumbwhere_auth_link_on_login',0) == 1) {

      //debug('thumbwhere_authentication_entity_load user ' .  $uid);


      debug('_thumbwhere_login');

      _thumbwhere_link_consumer($uid);

      /*

      ///////////////////////////////////////////////////////////////////////////////////////////////
      //
      //  Here we create a corresponding entity in the ThumbWhere domain if we need to.
      //

      $entity = user_load($uid);

      $_tw_pk_consumer = _get_pk_consumer($entity);

      // $_tw_pk_consumer has not been set - so this is Register...
      if (empty($_tw_pk_consumer)) {

       if (twCanDebug()) debug('USER HAS NO CONSUMER');


        // If no password is provided (when we are testing) then we supply one just for completeness.
        if (!isset($entity->pass)) {
          $entity->pass = 'pass-' . uniqid();
        }

        // $_tw_pk_consumer has not been set - so this is Register so this will create a ThumbWhere and Drupal user
        _thumbwhere_register_existing($entity->name, $entity->pass);

        // If we managed to get back a tw identity, then all is good.
        if (!empty($_tw_pk_consumer)) {
          _set_pk_consumer($entity, $_tw_pk_consumer);
        }
        else {
          // We were not expecting that...
          throw new Exception('Failed to Create User : Error TA-001');
        }

        // Save it back..
        user_save($entity);

        if (twCanDebug()) debug('CONSUMER ALLOCATED');

      }
      */
    }


    //
    //
    //
    ////////////////////////////////////////////////


    // Do we want to login via drupal?
    if (variable_get('thumbwhere_auth_drupal') == 1) {

      //
      // Login using Dupal's internal repository.
      //

      $uid = user_authenticate($username,$password);

      if ($uid) {
          return $uid;
      }

      drupal_set_message(t('Login with supplied password failed.'), 'error.');

      // If you don't do this...  there will be an error
      return NULL;
    }
    else {

      //
      // Login using ThumbWhere'e external repository.
      //

      if (twCanDebug()) debug('LOGIN TO THUMBWHERE');

      // Get a handle on the web service library provider for 'identity v1.1'
      $twIdentityAPI = new ThumbWhereAPIIdentity();

      //
      // Request a new 'unearthed' identity...
      //

      $parameters = array();

      $parameters['key'] = variable_get('thumbwhere_api_key');
      $parameters['type'] = 'unearthed';
      $parameters['id'] = $username;
      $parameters['secret'] = $password;

      $requestResponse = $twIdentityAPI->call_authenticate($parameters);

      if (twCanDebug()) {
        debug('$requestResponse');
        debug($requestResponse);
      }


      return $uid;

    }
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_validate($username, $current_password) {

  //debug('current_password = ' . $current_password);

  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();

  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    return FALSE;
  }
  else {

    // Do we want to login via drupal?
    if (variable_get('thumbwhere_auth_drupal') == 1) {
      //
      // Login using Dupal's internal repository.
      //

      $uid = user_authenticate($username,$current_password);

      if ($uid) {
        return TRUE;
      }

      drupal_set_message(t('No such user'), 'error.');

      // If you don't do this...  there will be an error
      return FALSE;

    } else
    {

      //
      // TODO: Authenticate the user
      //

      if (twCanDebug()) debug('VALIDATE WITH THUMBWHERE');

      // DEBUG USER!
      global $user;
      $user_loaded = user_load($user->uid);
      $user_loaded->language = 'und';
      debug($user_loaded);

      // Get a handle on the web service library provider for 'identity v1.1'
      $twIdentityAPI = new ThumbWhereAPIIdentity();

      //
      // Request a new 'unearthed' identity...
      //

      $parameters = array();

      $parameters['key'] = variable_get('thumbwhere_api_key');
      $parameters['type'] = 'unearthed';
      $parameters['id'] = $username;
      $parameters['secret'] = $current_password;

      $requestResponse = $twIdentityAPI->call_authenticate($parameters);

      //debug('$requestResponse');
      //debug($requestResponse);

      $memberToken = $requestResponse->body->authenticate->member;
      $identityToken = $requestResponse->body->authenticate->identity;

      // No member token, no login
      if (empty($memberToken)) {
        //throw new Exception('Failed to Verify User : Error TA-002');
        return FALSE;
      }
    }

    return TRUE;
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_validate_and_change_password($username, $current_password, $new_password) {

  if (twCanDebug())debug('_thumbwhere_validate_and_change_password ' . $username);
  if (twCanDebug())debug('_thumbwhere_validate_and_change_password ' . $current_password);
  if (twCanDebug())debug('_thumbwhere_validate_and_change_password ' . $new_password);


  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();



  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    return FALSE;
  }
  else {


    // Do we want to login via drupal?
    if (variable_get('thumbwhere_auth_drupal') == 1) {
      //
      // Login using Dupal's internal repository.
      //

      //debug('authenticate');

      $uid = user_authenticate($username,$current_password);

      if ($uid) {

        // Save the password

        $account = user_load($uid); // Loading account

        $edit = array(
          'pass' =>  $new_password
        );

        user_save($account, $edit);

        return TRUE;
      }

      drupal_set_message(t('No such user'), 'error.');

      // If you don't do this...  there will be an error
      return FALSE;

    } else
    {

      // This is not implemented.. We don't need it yet.
      throw new Exception('ThumbWhere Failed to Update User Password : Error TA-005');

      return TRUE;
    }
  }

}



/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_change_password($username, $new_password) {

  if (twCanDebug()) debug('_thumbwhere_validate_and_change_password ' . $username);
  if (twCanDebug()) debug('_thumbwhere_validate_and_change_password ' . $new_password);


  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();


  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    return FALSE;
  }
  else {

    //debug('_thumbwhere_change_password');

    // Link the consumer, if we should
    //_thumbwhere_link_consumer($uid);

    // Do we want to login via drupal?
    if (variable_get('thumbwhere_auth_drupal') == 1) {

        // Save the password
        $account = user_load($uid); // Loading account
        $edit = array(
          'pass' =>  $new_password
        );
        user_save($account, $edit);
        return TRUE;
    } else
    {

      //  This is not implemented.. We don't need it yet.
      throw new Exception('ThumbWhere Failed to Update User Password : Error TA-005');

      return TRUE;
    }
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_register($username, $password) {

  // Just make sure that the uset does not already exist...
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField()) {

    // This global represents the current thumbwhere consumer id
    global $_tw_pk_consumer;

    //
    // TODO: Create the user - get id
    //

    if (twCanDebug()) debug('CREATE NEW THUMBWHERE MEMBER');

    // Get a handle on the web service library provider for 'identity v1.1'
    $twIdentityAPI = new ThumbWhereAPIIdentity();

    //
    // Request a new 'unearthed' identity...
    //

    if (empty($username))
    {
      $username = uniqid();
    }

    $parameters = array();

    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['type'] = 'unearthed';
    $parameters['id'] = $username;

    $requestResponse = $twIdentityAPI->call_request($parameters);

    if (twCanDebug()) {
      debug('REQUEST');

      debug($requestResponse);
    }

    //
    // Then authenticate the request...
    //

    $parameters = array();
    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['code'] = $requestResponse->body->request->challenge_code;
    //$parameters['id'] = $username;
    $parameters['secret'] = $password;

    $authenticateRequestResponse = $twIdentityAPI->call_authenticate_request($parameters);

    if (twCanDebug()) {
      debug('AUTHENTICATEREQUEST');
      debug($authenticateRequestResponse);
    }

    $memberToken = $authenticateRequestResponse->body->authenticate_request->member;
    $identityToken = $authenticateRequestResponse->body->authenticate_request->identity;

    if (twCanDebug()) {
      debug('member ' . $memberToken);
      debug('identity ' . $identityToken);
    }

    //
    // .. and now we create a consumer with a single member...
    //

    // Get a handle on the web service library provider for 'content v1.1'
    $twContentAPI = new ThumbWhereAPIContent();

    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['member'] = $memberToken;
    $parameters['name'] = $username;

    $registerConsumerResponse = $twContentAPI->call_register_consumer($parameters);

    if (twCanDebug()) {
      debug('REGISTERCONSUMER');
      debug($registerConsumerResponse);
    }

    // Primary id we want to use...
    $_tw_pk_consumer = $registerConsumerResponse->body->register_consumer->consumer;


    return TRUE;
  }

  return FALSE;
}


/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_register_existing($username, $password) {

  // Just make sure that the uset does not already exist...
  if (db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField()) {

    // This global represents the current thumbwhere consumer id
    global $_tw_pk_consumer;

    //
    // TODO: Create the user - get id
    //

    if (twCanDebug())
      debug('CREATE NEW THUMBWHERE MEMBER');

    // Get a handle on the web service library provider for 'identity v1.1'
    $twIdentityAPI = new ThumbWhereAPIIdentity();

    //
    // Request a new 'unearthed' identity...
    //

    if (empty($username))
    {
      $username = uniqid();
    }


    $parameters = array();

    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['type'] = 'unearthed';
    $parameters['id'] = $username;

    $requestResponse = $twIdentityAPI->call_request($parameters);

    if (twCanDebug()) {
      debug('REQUEST');

      debug($requestResponse);
    }

    //
    // Then authenticate the request...
    //

    $parameters = array();
    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['code'] = $requestResponse->body->request->challenge_code;
    //$parameters['id'] = $username;
    $parameters['secret'] = $password;

    $authenticateRequestResponse = $twIdentityAPI->call_authenticate_request($parameters);

    if (twCanDebug()) {
      debug('AUTHENTICATEREQUEST');
      debug($authenticateRequestResponse);
    }

    $memberToken = $authenticateRequestResponse->body->authenticate_request->member;
    $identityToken = $authenticateRequestResponse->body->authenticate_request->identity;

    if (twCanDebug()) {
      debug('member ' . $memberToken);
      debug('identity ' . $identityToken);
    }

    //
    // .. and now we create a consumer with a single member...
    //

    // Get a handle on the web service library provider for 'content v1.1'
    $twContentAPI = new ThumbWhereAPIContent();

    $parameters['key'] = variable_get('thumbwhere_api_key');
    $parameters['member'] = $memberToken;
    $parameters['name'] = $username;

    $registerConsumerResponse = $twContentAPI->call_register_consumer($parameters);

    if (twCanDebug()) {
      debug('REGISTERCONSUMER');
      debug($registerConsumerResponse);
    }

    // Primary id we want to use...
    $_tw_pk_consumer = $registerConsumerResponse->body->register_consumer->consumer;


    return TRUE;
  }

  return FALSE;
}

//
//  ThumbWhere/Drupal Integration
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Utilities
//

/**
 * Set the pk_consumer ThumbWhere ID for the User
 */
function _set_pk_consumer(&$object, $id) {

  //watchdog('thumbwhere_authenticate', '_set_pk_consumer ' . $id);

  if (is_array($object)) {
    if (isset($object['field_pk_consumer'][$object->language][0])) {
      form_set_error('name', t('Attempt to set id on user, when they already have an id.'));
    }
    else {
      $object['field_pk_consumer'] = array(
          $object->language => array(
              0 => array(
                  'thumbwhere_id' => (int)$id,
              ),
          ),
      );
    }
  }
  else {
    if (isset($object->field_pk_consumer[$object->language][0])) {
      form_set_error('name', t('Attempt to set id on user, when they already have an id.'));
    }
    else {
      $object->field_pk_consumer = array(
          $object->language => array(
              0 => array(
                  'thumbwhere_id' => (int)$id,
              ),
          )
      );
    }
  }
}


/**
 * Set the pk_consumer ThumbWhere ID for the User
 */
function _get_pk_consumer(&$object) {

  if (is_array($object)) {

    if (!empty($object['field_pk_consumer'][$object->language]))
    {

      return $object['field_pk_consumer'][$object->language][0]['thumbwhere_id'];
    }
  }
  else {
    if (!empty($object->field_pk_consumer[$object->language]))
    {
      return $object->field_pk_consumer[$object->language][0]['thumbwhere_id'];
    }

  }

  return NULL;
}


//
//  ThumbWhere/Drupal Integration
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Helper methods
//

/**
 * Set the ThumbWhere ID for the User
 */
/*
function thumbwhere_authentication_utility_get_user_pk_member() {

  global $user;

  $user_loaded = user_load($user->uid);
  $user_loaded->language = 'und';

  // If we have
  if (!isset($user_loaded->pk_member[$user_loaded->language][0])) {

    if ($user->uid == 1) {
      // Admin user needs to be allocated a ThumbWhere id...
      throw new Exception('Admin account is missing a ThumbWhere Id : Error TA-006');
    }
    else {
      throw new Exception('User is missing a ThumbWhere Id : Error TA-006');
    }

    debug('create admin user');
  }

  return $user_loaded->pk_member[$user_loaded->language][0]['thumbwhere_id'];
}
 */
//
//  ThumbWhere/Drupal Integration
//
/////////////////////////////////////////////////////////////////////////////////////////////////////
