<?php
/**
 * @file
 *
 * This module injects itself into Drupal's Authentication stack.
 * And allows users to authenticate against with Drupal, against the external
 * ThumbWhere web service API.
 *
 */

///////////////////////////////////////////////////////////////////
//
//  Official Drupal Hooks
//

/**
 * Implements hook_info().
 */
function thumbwhere_authentication_info($field = 0) {

  $info['name'] = 'thumbwhere_authentication';
  $info['protocol'] = 'ThumbWhere';

  if ($field) {
    return $info[$field];
  }

  return $info;
}

/**
 * Implements hook_form_alter().
 *
 * We replace the local login validation handler with our own that will
 * authenticate with ThumbWhere.
 */
function thumbwhere_authentication_form_alter(&$form, &$form_state, $form_id) {

  // When the time is right...

  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    // Find the normal password validator.
    $key = array_search('user_login_authenticate_validate', $form['#validate']);

    // And if it exists,
    if ($key !== FALSE) {
      // Replace it with out own..
      $form['#validate'][$key] = '_thumbwhere_user_login_form_validate';
    }
  }
  elseif ($form_id == 'user_profile_form') {
    // Find the normal password validator.

    // Find the normal password validator.
    $key = array_search('user_validate_current_pass', $form['#validate']);

    // And if it exists,
    if ($key !== FALSE) {
      // Replace it with out own..
      $form['#validate'][$key] = '_thumbwhere_validate_current_pass';
      //unset($form['#validate'][$key]);
    }

  }

}

/**
 * Implements hook__entity_presave().
 *
 * When the user entity is saved, we need to check if it is new and create a new ThumbWhere member.
 *
 */
function thumbwhere_authentication_entity_presave($entity, $type) {

  // This global represents the current thumbwhere member id

  global $_tw_pk_member;

  if ($type != 'user') return;

  // If this is new
  if ($entity->is_new) {

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we create a corresponding entity in the ThumbWhere domain if we need to.
    //

    // $_tw_pk_member has not been set - so this is Register...
    if (empty($_tw_pk_member)) {

      // If no password is provided (when we are testing) then we supply one just for completeness.
      if (!isset($entity->pass))
      {
        $entity->pass = 'pass-' . uniqid();
      }

      // $_tw_pk_member has not been set - so this is Register so this will create a ThumbWhere and Drupal user
      _thumbwhere_register($entity->name, $entity->pass);

      // If we managed to get back a tw identity, then all is good.
      if (!empty($_tw_pk_member)) {
        _set_thumbwhere_id($entity, $_tw_pk_member);
      }
      else {
        // We were not expecting that...
        throw new Exception('Failed to Create User : Error TA-001');
      }

    }

    //
    // After that we are all good to return our populated node, and Drupal should be none the wiser...
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Ta dah!

  }
  else {

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we maybe modify a corresponding entity in the ThumbWhere domain..
    //  We only want to modify it if something has changed. For this size of object that we have, it
    //  is cheaper to work out if and what has changed instead of performing a superflous update to the database
    //

    //
    // Work out what has changed.
    //

    $changes = array();

    /*
     if ($node->track_quantity['und'][0]['value'] != $node->original->track_quantity['und'][0]['value'])
     {
     $changes['track_quantity'] = $node->track_quantity;
     }
     */

    $changesCount = count($changes);

    //
    // If there are fields we care about, we perform an update to the corresponding ThumbWhere entity.
    //

    if ($changesCount > 0) {
      debug('We have ' . $changesCount . ' changes.');
    }

    //
    // Also... we have an oportunity here to update the Node with any new values...
    //

    //
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////

  }
}

//
//  Official Drupal Hooks
//
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Custom Validators
//

/**
 * Custom form validation function - Login as the user
 */
function _thumbwhere_user_login_form_validate($form, &$form_state) {

  if (!_thumbwhere_authentication_authenticate($form_state)) {
    form_set_error('name', t('Login failed.'));
  }
}

/**
 * Custom form validation function - validate the current password
 */
function _thumbwhere_validate_current_pass($form, &$form_state) {

  if (!_thumbwhere_authentication_validate_and_changepassword($form_state)) {
    form_set_error('pass', t('Password failed to validate.'));
  }
}

//
//  Custom Validators
//
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Business Logic
//

/**
 * Custom user authentication function
 */
function _thumbwhere_authentication_authenticate(&$form_state) {

  global $user;

  // get the first four characters of the users name
  $username = trim($form_state['input']['name']);
  $password = trim($form_state['values']['pass']);

  // Authenticate with Thumbwhere, return the drupal user id
  $uid = _thumbwhere_login($username, $password);

  if (empty($uid)) {
    return FALSE;
  }
  else {
    // Populate the form with the uid
    $form_state['uid'] = $uid;

    return TRUE;
  }
}

/**
 * Custom user validate and change password function
 */
function _thumbwhere_authentication_validate_and_changepassword(&$form_state) {

  global $user;

  // get the first four characters of the users name
  $username = trim($form_state['values']['name']);
  $new_password = trim($form_state['values']['pass']);
  $current_password = trim($form_state['values']['current_pass']);

  // If we are changing the password?
  if (!empty($new_password)) {
    // ... yes.. then validate and change the password
    return _thumbwhere_validate_and_change_password($username, $current_password, $new_password);
  }
  else {
    // .. no just validate the password
    return _thumbwhere_validate($username, $current_password);
  }

}

//
//  Business Logic
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ThumbWhere/Drupal Integration
//

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_login($username, $password) {

  // This global represents the current thumbwhere member id
  global $_tw_pk_member;

  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();

  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    //
    // Does the user exist in ThumbWhere?
    //

    $_tw_pk_member = NULL;

    // If we know about the user in ThumbWhere
    if (!empty($_tw_pk_member)) {
      global $user;

      // Register or create the user
      user_external_login_register($username, t("thumbwhere_authentication"));

      // If you don't do this...  there will be an error
      return $user->uid;
    }

   // drupal_set_message(t('No such user'), 'error.');

    // User doesn't exist

    return NULL;
  }
  else {

    //
    // TODO: Authenticate the user.. get their id
    //

    $_tw_pk_member = 666;

    // If we run into trouble during the login...
    //throw new Exception('Failed to Authenticate User : Error TA-002');

    return $uid;
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_validate($username, $current_password) {

  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();

  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    return FALSE;
  }
  else {

    //
    // TODO: Authenticate the user
    //

    // If we run into trouble during the verifiy...
    //throw new Exception('Failed to Verify User : Error TA-002');

    return TRUE;
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_validate_and_change_password($username, $current_password, $new_password) {

  // Do we have a uid for this user
  $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField();

  // If we dom't know about this user in drupal...
  if (empty($uid)) {

    return FALSE;
  }
  else {

    //
    // TODO: Validate and change password.
    //

    // If we run into trouble during the verifiy...
    //throw new Exception('Failed to Verify User : Error TA-005');

    return TRUE;
  }

}

/**
 * Return true if the user is authenticates with ThumbWhere
 */
function _thumbwhere_register($username, $password) {

  // Just make sure that the uset does not already exist...
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(
      ':name' => $username
  ))->fetchField()) {

    // This global represents the current thumbwhere member id
    global $_tw_pk_member;

    //
    // TODO: Create the user - get id
    //

    $_tw_pk_member = 667;

    // or if were not expecting an error..
    //throw new Exception('Failed to Authenticate User : Error TA-001');

    return TRUE;
  }

  return FALSE;
}

//
//  ThumbWhere/Drupal Integration
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Utilities
//

/**
 * Set the ThumbWhere ID for the User
 */
function _set_thumbwhere_id(&$object, $id) {

  if (is_array($object)) {
    if (isset($object['pk_member']['und'][0])) {
      form_set_error('name', t('Attempt to set id on user, when they already have an id.'));
    }
    else {
      $object['pk_member'] = array(
          'und' => array(
              0 => array(
                  'thumbwhere_id' => $id,
              ),
          ),
      );
    }
  }
  else {
    if (isset($object->pk_member['und'][0])) {
      form_set_error('name', t('Attempt to set id on user, when they already have an id.'));
    }
    else {
      $object->pk_member = array(
          'und' => array(
              0 => array(
                  'thumbwhere_id' => $id,
              ),
          )
      );
    }
  }
}

//
//  ThumbWhere/Drupal Integration
//
/////////////////////////////////////////////////////////////////////////////////////////////////////
