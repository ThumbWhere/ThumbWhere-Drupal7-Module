<?php
/**
 * @file
 *
 * This module injects itself into Drupal's Authentication stack.
 * And allows users to authenticate against with Drupal, against the external
 * ThumbWhere web service API.
 *
 */


/**
 * Implements hook_info().
 */
function thumbwhere_authentication_info($field = 0) {

  $info['name']= 'thumbwhere_authentication';
  $info['protocol'] = 'ThumbWhere';

  if ($field) {
    return $info[$field];
  }

  return $info;
}


/**
* Implements hook_form_alter().
*
* We replace the local login validation handler with our own that will
* authenticate with ThumbWhere.
*/
function thumbwhere_authentication_form_alter(&$form, &$form_state, $form_id) {

  // When the time is right...
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    // Find the normal password validator.
      $key = array_search('user_login_authenticate_validate', $form['#validate']);

      // And if it exists,
      if ($key !== FALSE) {
        // Replace it with out own..
        $form['#validate'][$key] = '_thumbwhere_authentication_user_form_validate';
      }
  }
}


/**
* Implements hook_user_presave().
*
* A user account is about to be created or updated.
*
*/
function thumbwhere_authentication_user_presave(&$edit, $account, $category)
{
  debug("thumbwhere_authentication_user_presave");
  debug($edit);
  debug($account);
  debug($category);

  // If fk_member has no value.. then we are a new user....
  if (!isset($edit->fk_member))
  {
    debug('populate member id...');

    //$edit['mail'] = '';

    // If we want we can set the ThumbWhere ID here...
    /*
    $edit['fk_member'] = array(
              'und' =>
              array (
                0 =>
                array (
                  'thumbwhere_id' => '123',
                ),
              ),
            );

    debug($edit);
	*/

  }
}





/**
 * Implements hook_node_presave().
 *
 * We need to keep an eye out for any create/update/delete operations so that we can update ThumbWhere entites.
 *
 * We use hook_node_presave to keep track of create/update
 * We use hook_node_delete to keep track of delete
 */
function thumbwhere_authentication_entity_presave($entity, $type) {

  debug("thumbwhere_authentication_entity_presave");

  twfd();

  if ($type != 'user') return;

  // If this is new
  if ($entity->is_new)
  {
    debug('New User...');

    debug($entity);

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we create a corresponding entity in the ThumbWhere domain..
    //

    //
    // Do some stuff...
    //

    //
    //  ... then we get back an id we can use..
    //

    $entity->fk_member = array(
              'und' =>
                array (
                0 =>
                  array (
                      'thumbwhere_id' => '123',
              ),
            ),
      );

    debug($entity);


    //
    // After that we are all good to return our populated node, and Drupal should be none the wiser...
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Ta dah!

  }
  else
  {

    debug('Old User...');

    debug($entity);

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  Here we maybe modify a corresponding entity in the ThumbWhere domain..
    //  We only want to modify it if something has changed. For this size of object that we have, it
    //  is cheaper to work out if and what has changed instead of performing a superflous update to the database
    //

    //
    // Work out what has changed.
    //

    $changes = array();

    /*
     if ($node->track_quantity['und'][0]['value'] != $node->original->track_quantity['und'][0]['value'])
    {
    debug('Changed!');

    $changes['track_quantity'] = $node->track_quantity;
    }
    */

    $changesCount = count($changes);

    //
    // If there are fields we care about, we perform an update to the corresponding ThumbWhere entity.
    //

    if ($changesCount > 0)
    {
      debug('We have ' . $changesCount . ' changes.');
    }


    //
    // Also... we have an oportunity here to update the Node with any new values...
    //

    //$node->track_quantity['und'][0]['value'] += 1;

    //
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////

  }
}


/**
 * Custom form validation function
 */
function _thumbwhere_authentication_user_form_validate($form, &$form_state) {

  debug('_thumbwhere_authentication_user_form_validate');

  if (!_thumbwhere_authentication_authenticate($form_state)) {
    form_set_error('name', t('Login failed.'));
  }
}


/**
 * Custom user authentication function
 */
function _thumbwhere_authentication_authenticate(&$form_state) {

  global $user;

  debug('_thumbwhere_authentication_user_form_validate');

  // get the first four characters of the users name
  $username = trim($form_state['input']['name']);
  $password = trim($form_state['values']['pass']);

  debug('login ' . $username . ' ' . $password);

  if ($username == "admin")
  {
      $form_state['uid'] = user_authenticate($username, $password);

      return  ($form_state['uid'] != 0);
  }
  else
  if (thumbwhere_login($username, $password))
  {
    // If we can let them in, we let them in.

    // Register or create the user
    user_external_login_register($username, t("thumbwhere_authentication"));

    // If you don't do this...  there will be an error
    $form_state['uid'] = $user->uid;

    return TRUE;
  }
  else
  {
    return FALSE;
  }
}

/**
* Return true if the user is authenticates with ThumbWhere
*/
function thumbwhere_login($username, $password)
{
    debug('login ' . $username . ' ' . $password);

    //
    // TODO: Make web service call to ThumbWhere to identify user.
    //

    return TRUE;
}



