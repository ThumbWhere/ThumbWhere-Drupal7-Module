<?php

/**
 * @file
 *
 * Install, update and uninstall functions for the ThumbWhere authentication module.
 */

/**
 * Implements hook_requirements().
 *
 * We want to check for settings that we want to check on or issue any warnings.
 *
 */
function thumbwhere_authentication_requirements($phase) {

  $requirements = array();

  $t = get_t();

  // Handle runtime check
  if ($phase == 'runtime') {

    if (variable_get('user_register') != '1') {

      $requirements['thumbwhere_authentication_user_register'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t('The site should be configured to allow users to automatically register.<p/> Go to the Configuration for <b>People/Account Settings</b> and set "<b>Who can register accounts?</b>" to be "Visitors" '),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    if (variable_get('user_email_verification') != '0') {

      $requirements['thumbwhere_authentication_user_email_verification'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t(
              'The site should be configured to allow users to automatically register.<p/> Go to the Configuration for <b>People/Account Settings</b> and for "<b>Who can register accounts?</b>" disable "<i>Require e-mail verification when a visitor creates an account</i>." '),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    // Make sure the Admin user has a member attached...
    if (!isset(user_load(1)->pk_member['und'][0])) {
      $requirements['thumbwhere_authentication_admin_memberid'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t('The site admin needs to be allocated a ThumbWhere Member id if you want to be able to use the site as admin. <p/> Go to the Configuration for <b>People</b> and edit the Admin user and allocate them a valid ThumbWhere member.'),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function thumbwhere_authentication_install() {

  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.

  $t = get_t();

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_thumbwhere_authentication_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_thumbwhere_authentication_installed_instances() as $instance) {
    $instance['entity_type'] = 'user';
    $instance['bundle'] = 'user';
    field_create_instance($instance);
  }

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

}

/**
 * Implements hook_uninstall().
 */
function thumbwhere_authentication_uninstall() {

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7

  foreach (array_keys(_thumbwhere_authentication_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the thumbwhere_authentication
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('user', 'user');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup thumbwhere_authentication
 */
function _thumbwhere_authentication_installed_fields() {

  $t = get_t();

  return array(
      'pk_member' => array(
          'field_name' => 'pk_member',
          'cardinality' => 1,
          'type' => 'thumbwhere_id',
          'default_value' => array(
              array(
                  'value' => -1
              )
          ),
      )
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup thumbwhere_authentication
 */
function _thumbwhere_authentication_installed_instances() {

  $t = get_t();
  return array(
      'pk_member' => array(
          'field_name' => 'pk_member',
          'label' => $t('Member Id'),
          'widget' => array(
              'type' => 'thumbwhere_id',
          ),
          'display' => array(
              'default' => array(
                  'label' => 'above',
                  'type' => 'thumbwhere_id_formatter',
              ),
          ),
          'description' => 'The id of the ThumbWhere member associated with this user.',
      ),
  );
}

