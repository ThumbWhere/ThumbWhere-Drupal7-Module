<?php

// Include the ThumbWhere SDK
require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'dependencies' . DIRECTORY_SEPARATOR . 'tw' . DIRECTORY_SEPARATOR . 'sdk.class.php');

/**
 * @file
 *
 * Install, update and uninstall functions for the ThumbWhere authentication module.
 */

/**
 * Implements hook_requirements().
 *
 * We want to check for settings that we want to check on or issue any warnings.
 *
 */
function thumbwhere_authentication_requirements($phase) {

  $requirements = array();

  $t = get_t();

  // Handle runtime check
  if ($phase == 'runtime') {

    if (variable_get('user_register') != '1') {

      $requirements['thumbwhere_authentication_user_register'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t('The site should be configured to allow users to automatically register.<p/> Go to the Configuration for <b>People/Account Settings</b> and set "<b>Who can register accounts?</b>" to be "Visitors" '),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    if (variable_get('user_email_verification') != '0') {

      $requirements['thumbwhere_authentication_user_email_verification'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t(
              'The site should be configured to allow users to automatically register.<p/> Go to the Configuration for <b>People/Account Settings</b> and for "<b>Who can register accounts?</b>" disable "<i>Require e-mail verification when a visitor creates an account</i>." '),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }

    $user_loaded = user_load(1);
    $user_loaded->language = 'und';

    // Make sure the Admin user has a member attached...
    if (!isset($user_loaded->pk_member[$user_loaded->language][0])) {
      $requirements['thumbwhere_authentication_admin_memberid'] = array(
          'title' => $t('ThumbWhere Authentication'),
          'description' => $t(
              'The site admin needs to be allocated a ThumbWhere Member id if you want to be able to use the site as admin. <p/> Go to the Configuration for <b>People</b> and edit the Admin user and allocate them a valid ThumbWhere member.'),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Required configuration'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function thumbwhere_authentication_install() {

  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.

  $t = get_t();

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_thumbwhere_authentication_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_thumbwhere_authentication_installed_instances() as $instance) {
    $instance['entity_type'] = 'user';
    $instance['bundle'] = 'user';
    field_create_instance($instance);
  }

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

  //
  // Now go off and get the current user....
  //

  //
  // Load the admin user,,,
  //

  global $user;
  global $_tw_pk_consumer;

  // Load the admin user
  $user_fields = user_load(1);
  $user_fields->language = 'und';

  if (twCanDebug()) {
    debug('CREATE NEW THUMBWHERE MEMBER');
  }

  // Get a handle on the web service library provider for 'identity v1.1'
  $twIdentityAPI = new ThumbWhereAPIIdentity();

  //
  // Request a new 'unearthed' identity...
  //

  //$username = 'admin-' . uniqid();
  //$password = uniqid();

  $username = 'admin';
  $password = 'password';

  $parameters = array();

  $parameters['key'] = variable_get('thumbwhere_api_key');
  $parameters['type'] = 'unearthed';
  $parameters['id'] = $username;

  $requestResponse = $twIdentityAPI->call_request($parameters);

  if (twCanDebug()) {
    debug('REQUEST');
    debug($requestResponse);
  }

  //
  // Then authenticate the request...
  //

  $parameters = array();
  $parameters['key'] = variable_get('thumbwhere_api_key');
  $parameters['code'] = $requestResponse->body->request->challenge_code;
  $parameters['secret'] = $password;

  $authenticateRequestResponse = $twIdentityAPI->call_authenticate_request($parameters);

  if (twCanDebug()) {
    debug('AUTHENTICATEREQUEST');
    debug($authenticateRequestResponse);
  }

  $memberToken = $authenticateRequestResponse->body->authenticate_request->member;
  $identityToken = $authenticateRequestResponse->body->authenticate_request->identity;

  debug('member ' . $memberToken);
  debug('identity ' . $identityToken);

  //
  // .. and now we create a consumer with a single member...
  //

  // Get a handle on the web service library provider for 'content v1.1'
  $twContentAPI = new ThumbWhereAPIContent();

  $parameters['key'] = variable_get('thumbwhere_api_key');
  $parameters['member'] = $memberToken;
  $parameters['name'] = $username;

  $registerConsumerResponse = $twContentAPI->call_register_consumer($parameters);

  watchdog('thumbwhere_authenticate', 'REGISTERCONSUMER');

  //if (twCanDebug())
  debug($registerConsumerResponse);

  // TODO: Get member id and

  // Primary id we want to use...
  $_tw_pk_consumer = $registerConsumerResponse->body->register_consumer->consumer;

  //debug($user_fields);

  _set_pk_consumer($user_fields, $_tw_pk_consumer);

  //watchdog('thumbwhere_authenticate', $user_fields);

  //$user_fields->pk_consumer = $_tw_pk_consumer;

  watchdog('thumbwhere_authenticate', 'REGISTERCONSUMER');

  if (twCanDebug()) debug('SAVING USER');

  user_save($user_fields);

}

/**
 * Implements hook_uninstall().
 */
function thumbwhere_authentication_uninstall() {

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7

  foreach (array_keys(_thumbwhere_authentication_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the thumbwhere_authentication
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('user', 'user');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup thumbwhere_authentication
 */
function _thumbwhere_authentication_installed_fields() {

  $t = get_t();

  return array(
      'field_pk_consumer' => array(
          'field_name' => 'field_pk_consumer',
          'cardinality' => 1,
          'type' => 'unearthed_thumbwhere_id',
          'default_value' => array(
              array(
                  'value' => -1
              )
          ),
      )
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup thumbwhere_authentication
 */
function _thumbwhere_authentication_installed_instances() {

  $t = get_t();
  return array(
      'field_pk_consumer' => array(
          'field_name' => 'field_pk_consumer',
          'label' => $t('Consumer Id'),
          'widget' => array(
              'type' => 'unearthed_thumbwhere_id',
          ),
          'display' => array(
              'default' => array(
                  'label' => 'above',
                  'type' => 'thumbwhere_id_formatter',
              ),
          ),
          'description' => 'The id of the ThumbWhere consumer associated with this user.',
      ),
  );
}

